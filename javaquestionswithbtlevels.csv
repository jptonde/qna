Topic,Bloom's Level,Question
Unicode System,Remember,Name important features of Unicode System.
Date & Time,Create,Construct a Java application that uses Date & Time.
User Input,Evaluate,Justify the use of User Input.
Variable Types,Remember,List the key concepts related to Variable Types.
Variable Types,Understand,Explain the working of Variable Types.
Data Types,Create,Compose a use case involving Data Types.
Comments,Evaluate,Justify the use of Comments.
Variable Types,Analyze,Examine the components of Variable Types.
Date & Time,Evaluate,Justify the use of Date & Time.
Type Casting,Understand,Describe the use cases for Type Casting.
Unicode System,Apply,Execute operations using Unicode System.
Data Types,Create,Construct a Java application that uses Data Types.
Date & Time,Understand,Describe the use cases for Date & Time.
Date & Time,Understand,Summarize the role of Date & Time.
Variable Types,Analyze,Distinguish between features of Variable Types.
User Input,Create,Construct a Java application that uses User Input.
Data Types,Analyze,Distinguish between features of Data Types.
Data Types,Apply,Modify an example using Data Types.
Basic Operators,Analyze,Distinguish between features of Basic Operators.
Variable Types,Create,Compose a use case involving Variable Types.
Unicode System,Create,Design a program using Unicode System.
Comments,Create,Construct a Java application that uses Comments.
Variable Types,Apply,Modify an example using Variable Types.
Basic Operators,Remember,List the key concepts related to Basic Operators.
Data Types,Remember,Name important features of Data Types.
Unicode System,Apply,Use appropriate syntax to write Unicode System.
Comments,Create,Develop a solution incorporating Comments.
Unicode System,Create,Construct a Java application that uses Unicode System.
Basic Operators,Apply,Modify an example using Basic Operators.
Comments,Evaluate,Evaluate the effectiveness of Comments.
Comments,Remember,Identify the purpose of Comments.
Variable Types,Apply,Use appropriate syntax to write Variable Types.
Date & Time,Understand,Explain the working of Date & Time.
Variable Types,Understand,Summarize the role of Variable Types.
Unicode System,Understand,Explain the working of Unicode System.
Variable Types,Evaluate,Defend the importance of Variable Types.
Variable Types,Create,Construct a Java application that uses Variable Types.
Variable Types,Remember,Identify the purpose of Variable Types.
Comments,Understand,Explain the working of Comments.
Date & Time,Analyze,Analyze the structure of Date & Time.
Comments,Analyze,Compare different approaches in Comments.
Comments,Understand,Interpret the functionality of Comments.
Variable Types,Remember,Recall how to use Variable Types.
Basic Operators,Create,Compose a use case involving Basic Operators.
Date & Time,Remember,Identify the purpose of Date & Time.
Variable Types,Evaluate,Evaluate the effectiveness of Variable Types.
User Input,Understand,Summarize the role of User Input.
Comments,Evaluate,Critique the implementation strategy for Comments.
Comments,Create,Design a program using Comments.
Basic Operators,Understand,Interpret the functionality of Basic Operators.
Type Casting,Remember,Identify the purpose of Type Casting.
Data Types,Evaluate,Critique the implementation strategy for Data Types.
Date & Time,Apply,Use appropriate syntax to write Date & Time.
Type Casting,Analyze,Analyze the structure of Type Casting.
Data Types,Analyze,Analyze the structure of Data Types.
Unicode System,Understand,Describe the use cases for Unicode System.
User Input,Apply,Use appropriate syntax to write User Input.
Basic Operators,Create,Develop a solution incorporating Basic Operators.
Type Casting,Remember,List the key concepts related to Type Casting.
Unicode System,Remember,List the key concepts related to Unicode System.
Comments,Analyze,Examine the components of Comments.
Data Types,Analyze,Compare different approaches in Data Types.
Unicode System,Analyze,Distinguish between features of Unicode System.
Basic Operators,Apply,Use appropriate syntax to write Basic Operators.
Comments,Apply,Execute operations using Comments.
Type Casting,Evaluate,Evaluate the effectiveness of Type Casting.
Date & Time,Apply,Execute operations using Date & Time.
Comments,Analyze,Distinguish between features of Comments.
Unicode System,Evaluate,Justify the use of Unicode System.
User Input,Evaluate,Evaluate the effectiveness of User Input.
Date & Time,Understand,Interpret the functionality of Date & Time.
Unicode System,Create,Compose a use case involving Unicode System.
Basic Operators,Understand,Describe the use cases for Basic Operators.
Date & Time,Create,Develop a solution incorporating Date & Time.
Data Types,Evaluate,Justify the use of Data Types.
Type Casting,Understand,Explain the working of Type Casting.
Date & Time,Analyze,Distinguish between features of Date & Time.
Decision Making,Apply,Modify an example using Decision Making.
Continue,Evaluate,Defend the importance of Continue.
If-else,Apply,Demonstrate how to implement If-else.
Loop Control,Understand,Describe the use cases for Loop Control.
If-else,Apply,Use appropriate syntax to write If-else.
Decision Making,Remember,List the key concepts related to Decision Making.
For-Each Loops,Analyze,Distinguish between features of For-Each Loops.
For-Each Loops,Create,Compose a use case involving For-Each Loops.
If-else,Analyze,Analyze the structure of If-else.
Decision Making,Analyze,Compare different approaches in Decision Making.
Loop Control,Apply,Demonstrate how to implement Loop Control.
Switch,Apply,Use appropriate syntax to write Switch.
do-while Loops,Evaluate,Justify the use of do-while Loops.
Loop Control,Analyze,Distinguish between features of Loop Control.
Continue,Remember,Recall how to use Continue.
Break,Understand,Summarize the role of Break.
Continue,Evaluate,Critique the implementation strategy for Continue.
Loop Control,Apply,Execute operations using Loop Control.
For Loops,Evaluate,Defend the importance of For Loops.
Continue,Apply,Demonstrate how to implement Continue.
Decision Making,Evaluate,Justify the use of Decision Making.
If-else,Understand,Describe the use cases for If-else.
Switch,Remember,List the key concepts related to Switch.
Break,Create,Construct a Java application that uses Break.
For-Each Loops,Analyze,Compare different approaches in For-Each Loops.
Decision Making,Analyze,Analyze the structure of Decision Making.
Decision Making,Create,Compose a use case involving Decision Making.
Break,Apply,Modify an example using Break.
Decision Making,Understand,Explain the working of Decision Making.
Decision Making,Understand,Describe the use cases for Decision Making.
While Loops,Analyze,Compare different approaches in While Loops.
While Loops,Understand,Describe the use cases for While Loops.
Continue,Evaluate,Evaluate the effectiveness of Continue.
Switch,Evaluate,Critique the implementation strategy for Switch.
Break,Understand,Explain the working of Break.
Continue,Remember,Identify the purpose of Continue.
If-else,Create,Compose a use case involving If-else.
For Loops,Create,Construct a Java application that uses For Loops.
Switch,Remember,Name important features of Switch.
For-Each Loops,Create,Develop a solution incorporating For-Each Loops.
For-Each Loops,Apply,Use appropriate syntax to write For-Each Loops.
Switch,Apply,Execute operations using Switch.
Break,Remember,List the key concepts related to Break.
For-Each Loops,Analyze,Examine the components of For-Each Loops.
Loop Control,Apply,Use appropriate syntax to write Loop Control.
If-else,Create,Design a program using If-else.
If-else,Apply,Modify an example using If-else.
Continue,Create,Design a program using Continue.
For-Each Loops,Evaluate,Justify the use of For-Each Loops.
For Loops,Apply,Use appropriate syntax to write For Loops.
Continue,Analyze,Compare different approaches in Continue.
do-while Loops,Understand,Summarize the role of do-while Loops.
Switch,Analyze,Analyze the structure of Switch.
Switch,Understand,Summarize the role of Switch.
Loop Control,Apply,Modify an example using Loop Control.
For Loops,Evaluate,Critique the implementation strategy for For Loops.
While Loops,Apply,Demonstrate how to implement While Loops.
For-Each Loops,Evaluate,Defend the importance of For-Each Loops.
If-else,Remember,List the key concepts related to If-else.
do-while Loops,Analyze,Compare different approaches in do-while Loops.
For Loops,Analyze,Analyze the structure of For Loops.
Continue,Create,Develop a solution incorporating Continue.
For Loops,Apply,Execute operations using For Loops.
Break,Create,Develop a solution incorporating Break.
While Loops,Apply,Execute operations using While Loops.
do-while Loops,Understand,Describe the use cases for do-while Loops.
Continue,Understand,Describe the use cases for Continue.
Continue,Apply,Execute operations using Continue.
Switch,Remember,Recall how to use Switch.
do-while Loops,Create,Construct a Java application that uses do-while Loops.
Loop Control,Create,Compose a use case involving Loop Control.
Switch,Evaluate,Justify the use of Switch.
Loop Control,Remember,Recall how to use Loop Control.
Loop Control,Evaluate,Defend the importance of Loop Control.
Decision Making,Create,Develop a solution incorporating Decision Making.
If-else,Create,Construct a Java application that uses If-else.
do-while Loops,Create,Design a program using do-while Loops.
For Loops,Evaluate,Justify the use of For Loops.
Loop Control,Analyze,Analyze the structure of Loop Control.
Loop Control,Create,Construct a Java application that uses Loop Control.
Decision Making,Remember,Recall how to use Decision Making.
For-Each Loops,Create,Design a program using For-Each Loops.
Decision Making,Create,Construct a Java application that uses Decision Making.
Methods,Analyze,Examine the components of Methods.
Class Attributes,Evaluate,Justify the use of Class Attributes.
Method Overloading,Evaluate,Critique the implementation strategy for Method Overloading.
Constructors,Analyze,Analyze the structure of Constructors.
Polymorphism,Evaluate,Justify the use of Polymorphism.
Object & Classes,Apply,Execute operations using Object & Classes.
Polymorphism,Evaluate,Defend the importance of Polymorphism.
Method Overloading,Remember,Recall how to use Method Overloading.
Access Modifiers,Understand,Summarize the role of Access Modifiers.
Dynamic Binding,Evaluate,Defend the importance of Dynamic Binding.
Overriding,Evaluate,Defend the importance of Overriding.
Variables Scope,Create,Develop a solution incorporating Variables Scope.
OOPs Concepts,Apply,Use appropriate syntax to write OOPs Concepts.
Encapsulation,Understand,Interpret the functionality of Encapsulation.
Inheritance,Create,Compose a use case involving Inheritance.
Static Binding,Analyze,Examine the components of Static Binding.
Constructors,Create,Compose a use case involving Constructors.
Method Overloading,Create,Develop a solution incorporating Method Overloading.
Encapsulation,Evaluate,Evaluate the effectiveness of Encapsulation.
Class Methods,Remember,Name important features of Class Methods.
Object & Classes,Create,Construct a Java application that uses Object & Classes.
Methods,Apply,Modify an example using Methods.
Methods,Analyze,Analyze the structure of Methods.
Class Methods,Evaluate,Evaluate the effectiveness of Class Methods.
Dynamic Binding,Understand,Summarize the role of Dynamic Binding.
Class Methods,Analyze,Examine the components of Class Methods.
Variables Scope,Create,Compose a use case involving Variables Scope.
Instance Initializer Block,Understand,Summarize the role of Instance Initializer Block.
Abstraction,Create,Compose a use case involving Abstraction.
OOPs Concepts,Understand,Describe the use cases for OOPs Concepts.
Abstraction,Apply,Demonstrate how to implement Abstraction.
Polymorphism,Understand,Explain the working of Polymorphism.
Methods,Analyze,Compare different approaches in Methods.
Object & Classes,Analyze,Distinguish between features of Object & Classes.
Class Methods,Remember,Identify the purpose of Class Methods.
Overriding,Apply,Use appropriate syntax to write Overriding.
Instance Initializer Block,Create,Compose a use case involving Instance Initializer Block.
Constructors,Evaluate,Justify the use of Constructors.
Instance Initializer Block,Create,Develop a solution incorporating Instance Initializer Block.
Polymorphism,Evaluate,Critique the implementation strategy for Polymorphism.
Methods,Understand,Describe the use cases for Methods.
Abstraction,Apply,Execute operations using Abstraction.
Instance Initializer Block,Evaluate,Defend the importance of Instance Initializer Block.
Constructors,Understand,Explain the working of Constructors.
Aggregation,Apply,Use appropriate syntax to write Aggregation.
Methods,Remember,Identify the purpose of Methods.
Static Binding,Evaluate,Evaluate the effectiveness of Static Binding.
Inheritance,Apply,Modify an example using Inheritance.
Static Binding,Understand,Describe the use cases for Static Binding.
Polymorphism,Apply,Modify an example using Polymorphism.
Static Binding,Create,Construct a Java application that uses Static Binding.
Inheritance,Analyze,Distinguish between features of Inheritance.
Method Overloading,Create,Compose a use case involving Method Overloading.
Abstraction,Remember,Name important features of Abstraction.
Constructors,Evaluate,Evaluate the effectiveness of Constructors.
Class Attributes,Apply,Modify an example using Class Attributes.
Constructors,Evaluate,Critique the implementation strategy for Constructors.
Methods,Remember,Name important features of Methods.
Overriding,Create,Construct a Java application that uses Overriding.
Method Overloading,Remember,Identify the purpose of Method Overloading.
Access Modifiers,Analyze,Analyze the structure of Access Modifiers.
Instance Initializer Block,Remember,Identify the purpose of Instance Initializer Block.
Methods,Analyze,Distinguish between features of Methods.
Constructors,Understand,Interpret the functionality of Constructors.
Access Modifiers,Evaluate,Justify the use of Access Modifiers.
Polymorphism,Remember,Recall how to use Polymorphism.
Static Binding,Analyze,Analyze the structure of Static Binding.
Constructors,Analyze,Distinguish between features of Constructors.
OOPs Concepts,Analyze,Examine the components of OOPs Concepts.
Constructors,Remember,Name important features of Constructors.
Variables Scope,Evaluate,Justify the use of Variables Scope.
Class Attributes,Evaluate,Critique the implementation strategy for Class Attributes.
Constructors,Analyze,Compare different approaches in Constructors.
Access Modifiers,Analyze,Examine the components of Access Modifiers.
Static Binding,Analyze,Compare different approaches in Static Binding.
Aggregation,Understand,Interpret the functionality of Aggregation.
Aggregation,Understand,Summarize the role of Aggregation.
Object & Classes,Create,Develop a solution incorporating Object & Classes.
Static Binding,Remember,List the key concepts related to Static Binding.
Class Attributes,Create,Design a program using Class Attributes.
Method Overloading,Understand,Describe the use cases for Method Overloading.
Static Binding,Create,Compose a use case involving Static Binding.
Static Binding,Apply,Modify an example using Static Binding.
Dynamic Binding,Remember,Identify the purpose of Dynamic Binding.
Encapsulation,Remember,Name important features of Encapsulation.
Object & Classes,Evaluate,Evaluate the effectiveness of Object & Classes.
Overriding,Apply,Modify an example using Overriding.
Inheritance,Remember,Identify the purpose of Inheritance.
Polymorphism,Create,Construct a Java application that uses Polymorphism.
Method Overloading,Analyze,Compare different approaches in Method Overloading.
Queue Interface,Analyze,Examine the components of Queue Interface.
Queue Interface,Apply,Execute operations using Queue Interface.
Comparators,Remember,List the key concepts related to Comparators.
Set Interface,Analyze,Compare different approaches in Set Interface.
Comparable Interface in Java,Create,Design a program using Comparable Interface in Java.
Set Interface,Evaluate,Evaluate the effectiveness of Set Interface.
Comparators,Evaluate,Defend the importance of Comparators.
Iterators,Analyze,Compare different approaches in Iterators.
SortedMap Interface,Analyze,Examine the components of SortedMap Interface.
Interfaces,Understand,Summarize the role of Interfaces.
Collection Interface,Understand,Describe the use cases for Collection Interface.
Comparable Interface in Java,Understand,Interpret the functionality of Comparable Interface in Java.
Comparators,Apply,Execute operations using Comparators.
Interfaces,Analyze,Examine the components of Interfaces.
Collections,Apply,Demonstrate how to implement Collections.
Interfaces,Create,Compose a use case involving Interfaces.
Comparable Interface in Java,Create,Develop a solution incorporating Comparable Interface in Java.
Set Interface,Analyze,Examine the components of Set Interface.
Queue Interface,Understand,Describe the use cases for Queue Interface.
SortedSet Interface,Analyze,Compare different approaches in SortedSet Interface.
List Interface,Remember,Name important features of List Interface.
Set Interface,Apply,Demonstrate how to implement Set Interface.
Queue Interface,Evaluate,Justify the use of Queue Interface.
Queue Interface,Create,Develop a solution incorporating Queue Interface.
SortedMap Interface,Remember,Name important features of SortedMap Interface.
SortedSet Interface,Evaluate,Critique the implementation strategy for SortedSet Interface.
Collection Interface,Analyze,Compare different approaches in Collection Interface.
Collection Interface,Evaluate,Evaluate the effectiveness of Collection Interface.
Queue Interface,Analyze,Distinguish between features of Queue Interface.
Collection Interface,Understand,Interpret the functionality of Collection Interface.
Collections,Understand,Describe the use cases for Collections.
SortedMap Interface,Remember,Recall how to use SortedMap Interface.
Set Interface,Apply,Use appropriate syntax to write Set Interface.
List Interface,Remember,Recall how to use List Interface.
SortedMap Interface,Understand,Interpret the functionality of SortedMap Interface.
SortedSet Interface,Understand,Explain the working of SortedSet Interface.
Iterators,Analyze,Analyze the structure of Iterators.
Collections,Evaluate,Defend the importance of Collections.
Map Interface,Apply,Demonstrate how to implement Map Interface.
SortedSet Interface,Apply,Modify an example using SortedSet Interface.
Iterators,Create,Construct a Java application that uses Iterators.
Interfaces,Understand,Explain the working of Interfaces.
Iterators,Create,Compose a use case involving Iterators.
SortedSet Interface,Evaluate,Evaluate the effectiveness of SortedSet Interface.
Comparable Interface in Java,Analyze,Distinguish between features of Comparable Interface in Java.
Collections,Analyze,Examine the components of Collections.
Comparable Interface in Java,Create,Construct a Java application that uses Comparable Interface in Java.
Interfaces,Apply,Use appropriate syntax to write Interfaces.
Set Interface,Remember,Recall how to use Set Interface.
Comparable Interface in Java,Remember,Name important features of Comparable Interface in Java.
SortedSet Interface,Apply,Use appropriate syntax to write SortedSet Interface.
Collection Interface,Create,Develop a solution incorporating Collection Interface.
Interfaces,Remember,Identify the purpose of Interfaces.
Interfaces,Evaluate,Evaluate the effectiveness of Interfaces.
List Interface,Create,Construct a Java application that uses List Interface.
SortedMap Interface,Analyze,Distinguish between features of SortedMap Interface.
Iterators,Apply,Demonstrate how to implement Iterators.
Map Interface,Understand,Interpret the functionality of Map Interface.
Collections,Analyze,Distinguish between features of Collections.
Map Interface,Understand,Describe the use cases for Map Interface.
SortedMap Interface,Understand,Describe the use cases for SortedMap Interface.
Map Interface,Remember,Identify the purpose of Map Interface.
Map Interface,Analyze,Distinguish between features of Map Interface.
Comparable Interface in Java,Apply,Demonstrate how to implement Comparable Interface in Java.
Collections,Evaluate,Justify the use of Collections.
Map Interface,Understand,Explain the working of Map Interface.
Collections,Create,Design a program using Collections.
SortedMap Interface,Apply,Demonstrate how to implement SortedMap Interface.
SortedMap Interface,Understand,Explain the working of SortedMap Interface.
SortedSet Interface,Apply,Execute operations using SortedSet Interface.
SortedSet Interface,Remember,Name important features of SortedSet Interface.
List Interface,Evaluate,Defend the importance of List Interface.
Queue Interface,Create,Design a program using Queue Interface.
Set Interface,Apply,Execute operations using Set Interface.
Map Interface,Evaluate,Critique the implementation strategy for Map Interface.
List Interface,Analyze,Distinguish between features of List Interface.
SortedSet Interface,Evaluate,Justify the use of SortedSet Interface.
List Interface,Understand,Interpret the functionality of List Interface.
Queue Interface,Understand,Summarize the role of Queue Interface.
Comparable Interface in Java,Evaluate,Evaluate the effectiveness of Comparable Interface in Java.
Map Interface,Analyze,Analyze the structure of Map Interface.
Comparators,Create,Construct a Java application that uses Comparators.
Queue Interface,Understand,Interpret the functionality of Queue Interface.
Collection Interface,Apply,Execute operations using Collection Interface.
Queue Interface,Remember,Recall how to use Queue Interface.
Control Structures,Create,Compose a use case involving Control Structures.
Data Types,Create,Develop a solution incorporating Data Types.
OOP Concepts,Remember,Identify the purpose of OOP Concepts.
OOP Concepts,Analyze,Compare different approaches in OOP Concepts.
Data Types,Remember,List the key concepts related to Data Types.
Variables,Evaluate,Evaluate the effectiveness of Variables.
Data Types,Apply,Execute operations using Data Types.
OOP Concepts,Remember,Name important features of OOP Concepts.
Variables,Evaluate,Defend the importance of Variables.
Loops,Create,Compose a use case involving Loops.
Data Types,Understand,Interpret the functionality of Data Types.
Control Structures,Analyze,Analyze the structure of Control Structures.
Data Types,Apply,Use appropriate syntax to write Data Types.
Variables,Apply,Demonstrate how to implement Variables.
Loops,Create,Design a program using Loops.
Loops,Create,Construct a Java application that uses Loops.
OOP Concepts,Understand,Summarize the role of OOP Concepts.
Variables,Create,Compose a use case involving Variables.
Control Structures,Remember,Identify the purpose of Control Structures.
Loops,Analyze,Compare different approaches in Loops.
Control Structures,Evaluate,Justify the use of Control Structures.
Control Structures,Analyze,Examine the components of Control Structures.
Variables,Analyze,Examine the components of Variables.
Control Structures,Understand,Interpret the functionality of Control Structures.
OOP Concepts,Create,Design a program using OOP Concepts.
Control Structures,Analyze,Distinguish between features of Control Structures.
Loops,Apply,Use appropriate syntax to write Loops.
Variables,Understand,Interpret the functionality of Variables.
Loops,Evaluate,Evaluate the effectiveness of Loops.
OOP Concepts,Analyze,Analyze the structure of OOP Concepts.
OOP Concepts,Apply,Execute operations using OOP Concepts.
Data Types,Remember,Recall how to use Data Types.
OOP Concepts,Remember,Recall how to use OOP Concepts.
Control Structures,Analyze,Compare different approaches in Control Structures.
Variables,Understand,Describe the use cases for Variables.
Loops,Understand,Summarize the role of Loops.
OOP Concepts,Apply,Demonstrate how to implement OOP Concepts.
Loops,Create,Develop a solution incorporating Loops.
Control Structures,Remember,Recall how to use Control Structures.
Variables,Apply,Execute operations using Variables.
Control Structures,Apply,Modify an example using Control Structures.
OOP Concepts,Evaluate,Critique the implementation strategy for OOP Concepts.
Loops,Understand,Explain the working of Loops.
Loops,Evaluate,Defend the importance of Loops.
Loops,Evaluate,Critique the implementation strategy for Loops.
Variables,Remember,List the key concepts related to Variables.
Variables,Analyze,Analyze the structure of Variables.
Data Types,Create,Design a program using Data Types.
Variables,Understand,Summarize the role of Variables.
Variables,Create,Construct a Java application that uses Variables.
Control Structures,Remember,Name important features of Control Structures.
Data Types,Remember,Identify the purpose of Data Types.
OOP Concepts,Create,Develop a solution incorporating OOP Concepts.
OOP Concepts,Evaluate,Justify the use of OOP Concepts.
Data Types,Understand,Describe the use cases for Data Types.
OOP Concepts,Understand,Explain the working of OOP Concepts.
Data Types,Understand,Summarize the role of Data Types.
Variables,Apply,Use appropriate syntax to write Variables.
Control Structures,Evaluate,Critique the implementation strategy for Control Structures.
Variables,Evaluate,Critique the implementation strategy for Variables.
Loops,Understand,Describe the use cases for Loops.
Variables,Apply,Modify an example using Variables.
Control Structures,Understand,Summarize the role of Control Structures.
OOP Concepts,Apply,Modify an example using OOP Concepts.
Variables,Understand,Explain the working of Variables.
Control Structures,Evaluate,Defend the importance of Control Structures.
OOP Concepts,Remember,List the key concepts related to OOP Concepts.
Loops,Remember,Recall how to use Loops.
Control Structures,Apply,Use appropriate syntax to write Control Structures.
Control Structures,Apply,Demonstrate how to implement Control Structures.
Control Structures,Create,Develop a solution incorporating Control Structures.
Variables,Remember,Name important features of Variables.
OOP Concepts,Apply,Use appropriate syntax to write OOP Concepts.
Variables,Analyze,Distinguish between features of Variables.
Loops,Apply,Execute operations using Loops.
Control Structures,Create,Design a program using Control Structures.
Variables,Remember,Identify the purpose of Variables.
Loops,Remember,Name important features of Loops.
Control Structures,Evaluate,Evaluate the effectiveness of Control Structures.
OOP Concepts,Analyze,Examine the components of OOP Concepts.
Data Types,Apply,Demonstrate how to implement Data Types.
Data Types,Evaluate,Defend the importance of Data Types.
OOP Concepts,Analyze,Distinguish between features of OOP Concepts.
Data Types,Understand,Explain the working of Data Types.
Loops,Analyze,Examine the components of Loops.
OOP Concepts,Understand,Describe the use cases for OOP Concepts.
Loops,Understand,Interpret the functionality of Loops.
Variables,Create,Develop a solution incorporating Variables.
Control Structures,Apply,Execute operations using Control Structures.
Loops,Apply,Modify an example using Loops.
OOP Concepts,Evaluate,Defend the importance of OOP Concepts.
Variables,Create,Design a program using Variables.
Variables,Remember,Recall how to use Variables.
Loops,Analyze,Analyze the structure of Loops.
"J2EE Components: Servlets, JSP, EJB, JDBC",Remember,"Identify the purpose of J2EE Components: Servlets, JSP, EJB, JDBC."
"Multi-tier Architecture (Client, Web, Business, EIS)",Analyze,"Examine the components of Multi-tier Architecture (Client, Web, Business, EIS)."
Overview of Java EE Architecture,Apply,Demonstrate how to implement Overview of Java EE Architecture.
Overview of Java EE Architecture,Analyze,Analyze the structure of Overview of Java EE Architecture.
J2SE vs. J2EE,Apply,Use appropriate syntax to write J2SE vs. J2EE.
J2EE Containers and Application Servers,Evaluate,Critique the implementation strategy for J2EE Containers and Application Servers.
Overview of Java EE Architecture,Create,Design a program using Overview of Java EE Architecture.
J2SE vs. J2EE,Create,Compose a use case involving J2SE vs. J2EE.
J2SE vs. J2EE,Understand,Summarize the role of J2SE vs. J2EE.
"J2EE Components: Servlets, JSP, EJB, JDBC",Analyze,"Examine the components of J2EE Components: Servlets, JSP, EJB, JDBC."
"Multi-tier Architecture (Client, Web, Business, EIS)",Evaluate,"Defend the importance of Multi-tier Architecture (Client, Web, Business, EIS)."
J2EE Containers and Application Servers,Evaluate,Evaluate the effectiveness of J2EE Containers and Application Servers.
"Multi-tier Architecture (Client, Web, Business, EIS)",Understand,"Explain the working of Multi-tier Architecture (Client, Web, Business, EIS)."
"J2EE Components: Servlets, JSP, EJB, JDBC",Remember,"Name important features of J2EE Components: Servlets, JSP, EJB, JDBC."
"J2EE Components: Servlets, JSP, EJB, JDBC",Evaluate,"Evaluate the effectiveness of J2EE Components: Servlets, JSP, EJB, JDBC."
J2SE vs. J2EE,Apply,Demonstrate how to implement J2SE vs. J2EE.
J2EE Containers and Application Servers,Apply,Execute operations using J2EE Containers and Application Servers.
"Multi-tier Architecture (Client, Web, Business, EIS)",Create,"Construct a Java application that uses Multi-tier Architecture (Client, Web, Business, EIS)."
"J2EE Components: Servlets, JSP, EJB, JDBC",Analyze,"Analyze the structure of J2EE Components: Servlets, JSP, EJB, JDBC."
J2EE Containers and Application Servers,Evaluate,Justify the use of J2EE Containers and Application Servers.
"Multi-tier Architecture (Client, Web, Business, EIS)",Remember,"Recall how to use Multi-tier Architecture (Client, Web, Business, EIS)."
J2EE Containers and Application Servers,Understand,Summarize the role of J2EE Containers and Application Servers.
Overview of Java EE Architecture,Remember,Name important features of Overview of Java EE Architecture.
Overview of Java EE Architecture,Analyze,Distinguish between features of Overview of Java EE Architecture.
J2EE Containers and Application Servers,Understand,Interpret the functionality of J2EE Containers and Application Servers.
"Multi-tier Architecture (Client, Web, Business, EIS)",Remember,"List the key concepts related to Multi-tier Architecture (Client, Web, Business, EIS)."
J2EE Containers and Application Servers,Understand,Describe the use cases for J2EE Containers and Application Servers.
Overview of Java EE Architecture,Remember,Identify the purpose of Overview of Java EE Architecture.
Overview of Java EE Architecture,Understand,Summarize the role of Overview of Java EE Architecture.
"Multi-tier Architecture (Client, Web, Business, EIS)",Understand,"Summarize the role of Multi-tier Architecture (Client, Web, Business, EIS)."
"J2EE Components: Servlets, JSP, EJB, JDBC",Understand,"Interpret the functionality of J2EE Components: Servlets, JSP, EJB, JDBC."
J2SE vs. J2EE,Analyze,Compare different approaches in J2SE vs. J2EE.
J2EE Containers and Application Servers,Create,Compose a use case involving J2EE Containers and Application Servers.
J2EE Containers and Application Servers,Remember,Identify the purpose of J2EE Containers and Application Servers.
"Multi-tier Architecture (Client, Web, Business, EIS)",Analyze,"Distinguish between features of Multi-tier Architecture (Client, Web, Business, EIS)."
"Multi-tier Architecture (Client, Web, Business, EIS)",Evaluate,"Critique the implementation strategy for Multi-tier Architecture (Client, Web, Business, EIS)."
J2SE vs. J2EE,Remember,Identify the purpose of J2SE vs. J2EE.
Overview of Java EE Architecture,Evaluate,Justify the use of Overview of Java EE Architecture.
J2SE vs. J2EE,Apply,Execute operations using J2SE vs. J2EE.
"J2EE Components: Servlets, JSP, EJB, JDBC",Create,"Design a program using J2EE Components: Servlets, JSP, EJB, JDBC."
J2SE vs. J2EE,Create,Design a program using J2SE vs. J2EE.
"Multi-tier Architecture (Client, Web, Business, EIS)",Understand,"Interpret the functionality of Multi-tier Architecture (Client, Web, Business, EIS)."
J2SE vs. J2EE,Analyze,Analyze the structure of J2SE vs. J2EE.
Overview of Java EE Architecture,Understand,Explain the working of Overview of Java EE Architecture.
"Multi-tier Architecture (Client, Web, Business, EIS)",Create,"Compose a use case involving Multi-tier Architecture (Client, Web, Business, EIS)."
"J2EE Components: Servlets, JSP, EJB, JDBC",Apply,"Modify an example using J2EE Components: Servlets, JSP, EJB, JDBC."
"Multi-tier Architecture (Client, Web, Business, EIS)",Evaluate,"Evaluate the effectiveness of Multi-tier Architecture (Client, Web, Business, EIS)."
Overview of Java EE Architecture,Understand,Describe the use cases for Overview of Java EE Architecture.
Overview of Java EE Architecture,Evaluate,Critique the implementation strategy for Overview of Java EE Architecture.
Overview of Java EE Architecture,Remember,Recall how to use Overview of Java EE Architecture.
J2SE vs. J2EE,Evaluate,Defend the importance of J2SE vs. J2EE.
"Multi-tier Architecture (Client, Web, Business, EIS)",Apply,"Use appropriate syntax to write Multi-tier Architecture (Client, Web, Business, EIS)."
"J2EE Components: Servlets, JSP, EJB, JDBC",Remember,"Recall how to use J2EE Components: Servlets, JSP, EJB, JDBC."
J2SE vs. J2EE,Apply,Modify an example using J2SE vs. J2EE.
J2EE Containers and Application Servers,Create,Develop a solution incorporating J2EE Containers and Application Servers.
J2EE Containers and Application Servers,Create,Design a program using J2EE Containers and Application Servers.
"J2EE Components: Servlets, JSP, EJB, JDBC",Create,"Construct a Java application that uses J2EE Components: Servlets, JSP, EJB, JDBC."
J2EE Containers and Application Servers,Apply,Demonstrate how to implement J2EE Containers and Application Servers.
J2EE Containers and Application Servers,Create,Construct a Java application that uses J2EE Containers and Application Servers.
J2EE Containers and Application Servers,Analyze,Examine the components of J2EE Containers and Application Servers.
Overview of Java EE Architecture,Apply,Use appropriate syntax to write Overview of Java EE Architecture.
J2SE vs. J2EE,Remember,Recall how to use J2SE vs. J2EE.
"Multi-tier Architecture (Client, Web, Business, EIS)",Create,"Develop a solution incorporating Multi-tier Architecture (Client, Web, Business, EIS)."
Overview of Java EE Architecture,Understand,Interpret the functionality of Overview of Java EE Architecture.
"J2EE Components: Servlets, JSP, EJB, JDBC",Understand,"Describe the use cases for J2EE Components: Servlets, JSP, EJB, JDBC."
Overview of Java EE Architecture,Apply,Execute operations using Overview of Java EE Architecture.
"Multi-tier Architecture (Client, Web, Business, EIS)",Understand,"Describe the use cases for Multi-tier Architecture (Client, Web, Business, EIS)."
J2EE Containers and Application Servers,Analyze,Analyze the structure of J2EE Containers and Application Servers.
Overview of Java EE Architecture,Apply,Modify an example using Overview of Java EE Architecture.
Overview of Java EE Architecture,Create,Compose a use case involving Overview of Java EE Architecture.
J2SE vs. J2EE,Create,Develop a solution incorporating J2SE vs. J2EE.
"J2EE Components: Servlets, JSP, EJB, JDBC",Analyze,"Compare different approaches in J2EE Components: Servlets, JSP, EJB, JDBC."
J2SE vs. J2EE,Understand,Describe the use cases for J2SE vs. J2EE.
"J2EE Components: Servlets, JSP, EJB, JDBC",Create,"Compose a use case involving J2EE Components: Servlets, JSP, EJB, JDBC."
J2EE Containers and Application Servers,Apply,Use appropriate syntax to write J2EE Containers and Application Servers.
Overview of Java EE Architecture,Create,Construct a Java application that uses Overview of Java EE Architecture.
J2EE Containers and Application Servers,Remember,Name important features of J2EE Containers and Application Servers.
"Multi-tier Architecture (Client, Web, Business, EIS)",Apply,"Modify an example using Multi-tier Architecture (Client, Web, Business, EIS)."
"J2EE Components: Servlets, JSP, EJB, JDBC",Evaluate,"Critique the implementation strategy for J2EE Components: Servlets, JSP, EJB, JDBC."
"Multi-tier Architecture (Client, Web, Business, EIS)",Analyze,"Analyze the structure of Multi-tier Architecture (Client, Web, Business, EIS)."
"J2EE Components: Servlets, JSP, EJB, JDBC",Understand,"Explain the working of J2EE Components: Servlets, JSP, EJB, JDBC."
"J2EE Components: Servlets, JSP, EJB, JDBC",Apply,"Use appropriate syntax to write J2EE Components: Servlets, JSP, EJB, JDBC."
J2EE Containers and Application Servers,Evaluate,Defend the importance of J2EE Containers and Application Servers.
J2EE Containers and Application Servers,Analyze,Compare different approaches in J2EE Containers and Application Servers.
J2SE vs. J2EE,Evaluate,Critique the implementation strategy for J2SE vs. J2EE.
Overview of Java EE Architecture,Analyze,Examine the components of Overview of Java EE Architecture.
"J2EE Components: Servlets, JSP, EJB, JDBC",Create,"Develop a solution incorporating J2EE Components: Servlets, JSP, EJB, JDBC."
"J2EE Components: Servlets, JSP, EJB, JDBC",Remember,"List the key concepts related to J2EE Components: Servlets, JSP, EJB, JDBC."
"J2EE Components: Servlets, JSP, EJB, JDBC",Understand,"Summarize the role of J2EE Components: Servlets, JSP, EJB, JDBC."
J2SE vs. J2EE,Create,Construct a Java application that uses J2SE vs. J2EE.
"Multi-tier Architecture (Client, Web, Business, EIS)",Remember,"Name important features of Multi-tier Architecture (Client, Web, Business, EIS)."
J2SE vs. J2EE,Evaluate,Justify the use of J2SE vs. J2EE.
"Multi-tier Architecture (Client, Web, Business, EIS)",Evaluate,"Justify the use of Multi-tier Architecture (Client, Web, Business, EIS)."
J2EE Containers and Application Servers,Understand,Explain the working of J2EE Containers and Application Servers.
"Multi-tier Architecture (Client, Web, Business, EIS)",Apply,"Demonstrate how to implement Multi-tier Architecture (Client, Web, Business, EIS)."
J2SE vs. J2EE,Analyze,Distinguish between features of J2SE vs. J2EE.
"Multi-tier Architecture (Client, Web, Business, EIS)",Apply,"Execute operations using Multi-tier Architecture (Client, Web, Business, EIS)."
"J2EE Components: Servlets, JSP, EJB, JDBC",Apply,"Demonstrate how to implement J2EE Components: Servlets, JSP, EJB, JDBC."
J2SE vs. J2EE,Understand,Explain the working of J2SE vs. J2EE.
J2SE vs. J2EE,Evaluate,Evaluate the effectiveness of J2SE vs. J2EE.
Connection Pooling,Understand,Summarize the role of Connection Pooling.
Transaction Management,Evaluate,Defend the importance of Transaction Management.
JDBC Drivers,Create,Construct a Java application that uses JDBC Drivers.
"CRUD Operations (Insert, Update, Delete, Select)",Evaluate,"Justify the use of CRUD Operations (Insert, Update, Delete, Select)."
Connection Pooling,Remember,Name important features of Connection Pooling.
Connection Pooling,Apply,Use appropriate syntax to write Connection Pooling.
"CRUD Operations (Insert, Update, Delete, Select)",Remember,"Name important features of CRUD Operations (Insert, Update, Delete, Select)."
Connection Pooling,Evaluate,Critique the implementation strategy for Connection Pooling.
JDBC Architecture,Apply,Use appropriate syntax to write JDBC Architecture.
Connection Pooling,Create,Construct a Java application that uses Connection Pooling.
JDBC Architecture,Evaluate,Evaluate the effectiveness of JDBC Architecture.
PreparedStatement and CallableStatement,Remember,List the key concepts related to PreparedStatement and CallableStatement.
Transaction Management,Understand,Interpret the functionality of Transaction Management.
Transaction Management,Remember,List the key concepts related to Transaction Management.
Transaction Management,Apply,Demonstrate how to implement Transaction Management.
Connection Pooling,Create,Design a program using Connection Pooling.
PreparedStatement and CallableStatement,Evaluate,Critique the implementation strategy for PreparedStatement and CallableStatement.
"CRUD Operations (Insert, Update, Delete, Select)",Evaluate,"Critique the implementation strategy for CRUD Operations (Insert, Update, Delete, Select)."
JDBC Architecture,Analyze,Examine the components of JDBC Architecture.
"CRUD Operations (Insert, Update, Delete, Select)",Evaluate,"Evaluate the effectiveness of CRUD Operations (Insert, Update, Delete, Select)."
JDBC Architecture,Apply,Demonstrate how to implement JDBC Architecture.
PreparedStatement and CallableStatement,Understand,Explain the working of PreparedStatement and CallableStatement.
Transaction Management,Create,Develop a solution incorporating Transaction Management.
PreparedStatement and CallableStatement,Analyze,Analyze the structure of PreparedStatement and CallableStatement.
PreparedStatement and CallableStatement,Evaluate,Justify the use of PreparedStatement and CallableStatement.
"CRUD Operations (Insert, Update, Delete, Select)",Create,"Construct a Java application that uses CRUD Operations (Insert, Update, Delete, Select)."
Connection Pooling,Evaluate,Justify the use of Connection Pooling.
Transaction Management,Analyze,Analyze the structure of Transaction Management.
Transaction Management,Evaluate,Justify the use of Transaction Management.
JDBC Drivers,Create,Design a program using JDBC Drivers.
Transaction Management,Analyze,Distinguish between features of Transaction Management.
Connection Pooling,Create,Compose a use case involving Connection Pooling.
Connection Pooling,Analyze,Compare different approaches in Connection Pooling.
JDBC Architecture,Analyze,Analyze the structure of JDBC Architecture.
PreparedStatement and CallableStatement,Create,Design a program using PreparedStatement and CallableStatement.
JDBC Architecture,Apply,Modify an example using JDBC Architecture.
JDBC Architecture,Remember,Name important features of JDBC Architecture.
JDBC Architecture,Create,Design a program using JDBC Architecture.
"CRUD Operations (Insert, Update, Delete, Select)",Remember,"Identify the purpose of CRUD Operations (Insert, Update, Delete, Select)."
PreparedStatement and CallableStatement,Understand,Interpret the functionality of PreparedStatement and CallableStatement.
JDBC Drivers,Analyze,Examine the components of JDBC Drivers.
PreparedStatement and CallableStatement,Evaluate,Evaluate the effectiveness of PreparedStatement and CallableStatement.
JDBC Drivers,Create,Develop a solution incorporating JDBC Drivers.
JDBC Drivers,Evaluate,Justify the use of JDBC Drivers.
Connection Pooling,Analyze,Examine the components of Connection Pooling.
Transaction Management,Remember,Name important features of Transaction Management.
JDBC Drivers,Remember,Name important features of JDBC Drivers.
PreparedStatement and CallableStatement,Apply,Use appropriate syntax to write PreparedStatement and CallableStatement.
"CRUD Operations (Insert, Update, Delete, Select)",Analyze,"Analyze the structure of CRUD Operations (Insert, Update, Delete, Select)."
PreparedStatement and CallableStatement,Analyze,Compare different approaches in PreparedStatement and CallableStatement.
"CRUD Operations (Insert, Update, Delete, Select)",Create,"Compose a use case involving CRUD Operations (Insert, Update, Delete, Select)."
Transaction Management,Understand,Summarize the role of Transaction Management.
Transaction Management,Understand,Explain the working of Transaction Management.
JDBC Drivers,Apply,Modify an example using JDBC Drivers.
Transaction Management,Understand,Describe the use cases for Transaction Management.
"CRUD Operations (Insert, Update, Delete, Select)",Understand,"Summarize the role of CRUD Operations (Insert, Update, Delete, Select)."
Transaction Management,Apply,Execute operations using Transaction Management.
Connection Pooling,Remember,Identify the purpose of Connection Pooling.
"CRUD Operations (Insert, Update, Delete, Select)",Apply,"Use appropriate syntax to write CRUD Operations (Insert, Update, Delete, Select)."
JDBC Drivers,Evaluate,Evaluate the effectiveness of JDBC Drivers.
JDBC Drivers,Remember,List the key concepts related to JDBC Drivers.
Connection Pooling,Apply,Demonstrate how to implement Connection Pooling.
JDBC Drivers,Remember,Identify the purpose of JDBC Drivers.
"CRUD Operations (Insert, Update, Delete, Select)",Apply,"Modify an example using CRUD Operations (Insert, Update, Delete, Select)."
Connection Pooling,Apply,Execute operations using Connection Pooling.
Transaction Management,Create,Design a program using Transaction Management.
JDBC Architecture,Remember,List the key concepts related to JDBC Architecture.
JDBC Drivers,Evaluate,Critique the implementation strategy for JDBC Drivers.
JDBC Architecture,Analyze,Distinguish between features of JDBC Architecture.
Connection Pooling,Understand,Describe the use cases for Connection Pooling.
JDBC Architecture,Evaluate,Defend the importance of JDBC Architecture.
Connection Pooling,Analyze,Distinguish between features of Connection Pooling.
Connection Pooling,Evaluate,Evaluate the effectiveness of Connection Pooling.
"CRUD Operations (Insert, Update, Delete, Select)",Apply,"Execute operations using CRUD Operations (Insert, Update, Delete, Select)."
JDBC Drivers,Understand,Interpret the functionality of JDBC Drivers.
Transaction Management,Analyze,Examine the components of Transaction Management.
JDBC Architecture,Create,Develop a solution incorporating JDBC Architecture.
"CRUD Operations (Insert, Update, Delete, Select)",Understand,"Explain the working of CRUD Operations (Insert, Update, Delete, Select)."
PreparedStatement and CallableStatement,Understand,Describe the use cases for PreparedStatement and CallableStatement.
"CRUD Operations (Insert, Update, Delete, Select)",Apply,"Demonstrate how to implement CRUD Operations (Insert, Update, Delete, Select)."
JDBC Architecture,Apply,Execute operations using JDBC Architecture.
JDBC Drivers,Evaluate,Defend the importance of JDBC Drivers.
JDBC Drivers,Analyze,Compare different approaches in JDBC Drivers.
Transaction Management,Apply,Use appropriate syntax to write Transaction Management.
"CRUD Operations (Insert, Update, Delete, Select)",Create,"Design a program using CRUD Operations (Insert, Update, Delete, Select)."
"CRUD Operations (Insert, Update, Delete, Select)",Remember,"List the key concepts related to CRUD Operations (Insert, Update, Delete, Select)."
"CRUD Operations (Insert, Update, Delete, Select)",Analyze,"Distinguish between features of CRUD Operations (Insert, Update, Delete, Select)."
"CRUD Operations (Insert, Update, Delete, Select)",Create,"Develop a solution incorporating CRUD Operations (Insert, Update, Delete, Select)."
JDBC Drivers,Remember,Recall how to use JDBC Drivers.
PreparedStatement and CallableStatement,Apply,Modify an example using PreparedStatement and CallableStatement.
"CRUD Operations (Insert, Update, Delete, Select)",Understand,"Interpret the functionality of CRUD Operations (Insert, Update, Delete, Select)."
Connection Pooling,Create,Develop a solution incorporating Connection Pooling.
JDBC Architecture,Understand,Interpret the functionality of JDBC Architecture.
PreparedStatement and CallableStatement,Create,Construct a Java application that uses PreparedStatement and CallableStatement.
PreparedStatement and CallableStatement,Analyze,Distinguish between features of PreparedStatement and CallableStatement.
JDBC Drivers,Understand,Describe the use cases for JDBC Drivers.
JDBC Drivers,Apply,Execute operations using JDBC Drivers.
JDBC Drivers,Apply,Demonstrate how to implement JDBC Drivers.
JDBC Architecture,Remember,Recall how to use JDBC Architecture.
"CRUD Operations (Insert, Update, Delete, Select)",Understand,"Describe the use cases for CRUD Operations (Insert, Update, Delete, Select)."
User Input,Apply,Modify an example using User Input.
Basic Operators,Apply,Execute operations using Basic Operators.
User Input,Create,Design a program using User Input.
Variable Types,Create,Develop a solution incorporating Variable Types.
Basic Operators,Evaluate,Defend the importance of Basic Operators.
Comments,Remember,Recall how to use Comments.
User Input,Remember,Recall how to use User Input.
Type Casting,Evaluate,Justify the use of Type Casting.
Variable Types,Apply,Execute operations using Variable Types.
Variable Types,Evaluate,Justify the use of Variable Types.
Date & Time,Analyze,Compare different approaches in Date & Time.
Variable Types,Analyze,Compare different approaches in Variable Types.
User Input,Apply,Demonstrate how to implement User Input.
Type Casting,Remember,Name important features of Type Casting.
Basic Operators,Understand,Explain the working of Basic Operators.
Type Casting,Apply,Demonstrate how to implement Type Casting.
Basic Operators,Analyze,Examine the components of Basic Operators.
Variable Types,Understand,Interpret the functionality of Variable Types.
Unicode System,Evaluate,Evaluate the effectiveness of Unicode System.
Type Casting,Create,Develop a solution incorporating Type Casting.
Type Casting,Understand,Interpret the functionality of Type Casting.
Unicode System,Create,Develop a solution incorporating Unicode System.
Type Casting,Analyze,Examine the components of Type Casting.
User Input,Analyze,Examine the components of User Input.
User Input,Analyze,Compare different approaches in User Input.
Type Casting,Understand,Summarize the role of Type Casting.
Basic Operators,Analyze,Compare different approaches in Basic Operators.
Basic Operators,Remember,Name important features of Basic Operators.
User Input,Evaluate,Critique the implementation strategy for User Input.
Basic Operators,Apply,Demonstrate how to implement Basic Operators.
Variable Types,Create,Design a program using Variable Types.
Comments,Evaluate,Defend the importance of Comments.
Variable Types,Remember,Name important features of Variable Types.
Unicode System,Analyze,Examine the components of Unicode System.
Basic Operators,Create,Design a program using Basic Operators.
Date & Time,Evaluate,Evaluate the effectiveness of Date & Time.
User Input,Analyze,Distinguish between features of User Input.
Type Casting,Apply,Use appropriate syntax to write Type Casting.
Comments,Apply,Use appropriate syntax to write Comments.
Type Casting,Create,Design a program using Type Casting.
Basic Operators,Evaluate,Justify the use of Basic Operators.
User Input,Create,Compose a use case involving User Input.
User Input,Understand,Explain the working of User Input.
Comments,Remember,List the key concepts related to Comments.
Comments,Apply,Modify an example using Comments.
Type Casting,Remember,Recall how to use Type Casting.
Basic Operators,Remember,Recall how to use Basic Operators.
Unicode System,Remember,Identify the purpose of Unicode System.
Type Casting,Apply,Execute operations using Type Casting.
Comments,Understand,Summarize the role of Comments.
Basic Operators,Create,Construct a Java application that uses Basic Operators.
Unicode System,Apply,Demonstrate how to implement Unicode System.
Type Casting,Analyze,Distinguish between features of Type Casting.
Date & Time,Remember,Recall how to use Date & Time.
Unicode System,Understand,Interpret the functionality of Unicode System.
User Input,Create,Develop a solution incorporating User Input.
Basic Operators,Analyze,Analyze the structure of Basic Operators.
do-while Loops,Apply,Execute operations using do-while Loops.
Loop Control,Create,Design a program using Loop Control.
For-Each Loops,Understand,Interpret the functionality of For-Each Loops.
Continue,Create,Construct a Java application that uses Continue.
Switch,Analyze,Distinguish between features of Switch.
If-else,Analyze,Compare different approaches in If-else.
For Loops,Create,Design a program using For Loops.
Break,Analyze,Compare different approaches in Break.
If-else,Create,Develop a solution incorporating If-else.
For Loops,Understand,Explain the working of For Loops.
For-Each Loops,Remember,Recall how to use For-Each Loops.
Continue,Remember,List the key concepts related to Continue.
While Loops,Evaluate,Critique the implementation strategy for While Loops.
Break,Create,Compose a use case involving Break.
Break,Understand,Interpret the functionality of Break.
If-else,Understand,Summarize the role of If-else.
For-Each Loops,Understand,Explain the working of For-Each Loops.
Break,Remember,Name important features of Break.
do-while Loops,Analyze,Examine the components of do-while Loops.
For Loops,Remember,Identify the purpose of For Loops.
For-Each Loops,Evaluate,Evaluate the effectiveness of For-Each Loops.
For Loops,Apply,Modify an example using For Loops.
While Loops,Apply,Modify an example using While Loops.
Switch,Understand,Explain the working of Switch.
Switch,Understand,Describe the use cases for Switch.
Break,Evaluate,Justify the use of Break.
Decision Making,Remember,Identify the purpose of Decision Making.
do-while Loops,Apply,Use appropriate syntax to write do-while Loops.
Loop Control,Evaluate,Evaluate the effectiveness of Loop Control.
Continue,Remember,Name important features of Continue.
Switch,Analyze,Compare different approaches in Switch.
If-else,Analyze,Distinguish between features of If-else.
While Loops,Remember,Name important features of While Loops.
do-while Loops,Evaluate,Defend the importance of do-while Loops.
Break,Understand,Describe the use cases for Break.
If-else,Remember,Recall how to use If-else.
While Loops,Analyze,Analyze the structure of While Loops.
Switch,Create,Develop a solution incorporating Switch.
do-while Loops,Evaluate,Evaluate the effectiveness of do-while Loops.
While Loops,Create,Develop a solution incorporating While Loops.
do-while Loops,Remember,Identify the purpose of do-while Loops.
Break,Remember,Identify the purpose of Break.
do-while Loops,Understand,Interpret the functionality of do-while Loops.
Decision Making,Evaluate,Evaluate the effectiveness of Decision Making.
If-else,Understand,Interpret the functionality of If-else.
Loop Control,Remember,Name important features of Loop Control.
For Loops,Remember,Name important features of For Loops.
For-Each Loops,Apply,Modify an example using For-Each Loops.
For Loops,Understand,Describe the use cases for For Loops.
For-Each Loops,Apply,Execute operations using For-Each Loops.
Decision Making,Understand,Summarize the role of Decision Making.
Decision Making,Evaluate,Defend the importance of Decision Making.
Break,Apply,Execute operations using Break.
Continue,Apply,Modify an example using Continue.
If-else,Understand,Explain the working of If-else.
If-else,Evaluate,Critique the implementation strategy for If-else.
For-Each Loops,Apply,Demonstrate how to implement For-Each Loops.
Continue,Understand,Explain the working of Continue.
Loop Control,Understand,Explain the working of Loop Control.
Decision Making,Apply,Use appropriate syntax to write Decision Making.
Switch,Analyze,Examine the components of Switch.
do-while Loops,Remember,List the key concepts related to do-while Loops.
do-while Loops,Understand,Explain the working of do-while Loops.
For-Each Loops,Create,Construct a Java application that uses For-Each Loops.
Decision Making,Apply,Execute operations using Decision Making.
do-while Loops,Apply,Modify an example using do-while Loops.
Break,Analyze,Examine the components of Break.
Dynamic Binding,Create,Develop a solution incorporating Dynamic Binding.
Access Modifiers,Create,Design a program using Access Modifiers.
Polymorphism,Evaluate,Evaluate the effectiveness of Polymorphism.
Access Modifiers,Create,Construct a Java application that uses Access Modifiers.
Access Modifiers,Evaluate,Critique the implementation strategy for Access Modifiers.
Inheritance,Analyze,Compare different approaches in Inheritance.
Methods,Remember,List the key concepts related to Methods.
OOPs Concepts,Understand,Interpret the functionality of OOPs Concepts.
Instance Initializer Block,Evaluate,Justify the use of Instance Initializer Block.
Encapsulation,Analyze,Examine the components of Encapsulation.
Abstraction,Apply,Modify an example using Abstraction.
Method Overloading,Apply,Use appropriate syntax to write Method Overloading.
Static Binding,Understand,Summarize the role of Static Binding.
Overriding,Analyze,Examine the components of Overriding.
Class Attributes,Evaluate,Defend the importance of Class Attributes.
Inheritance,Create,Construct a Java application that uses Inheritance.
Encapsulation,Analyze,Compare different approaches in Encapsulation.
Variables Scope,Understand,Summarize the role of Variables Scope.
Dynamic Binding,Evaluate,Justify the use of Dynamic Binding.
Inheritance,Apply,Execute operations using Inheritance.
Inheritance,Evaluate,Defend the importance of Inheritance.
OOPs Concepts,Understand,Explain the working of OOPs Concepts.
Variables Scope,Remember,Name important features of Variables Scope.
Overriding,Understand,Summarize the role of Overriding.
Class Methods,Remember,Recall how to use Class Methods.
Constructors,Remember,Identify the purpose of Constructors.
Aggregation,Remember,Identify the purpose of Aggregation.
Object & Classes,Apply,Modify an example using Object & Classes.
Methods,Evaluate,Evaluate the effectiveness of Methods.
Access Modifiers,Create,Compose a use case involving Access Modifiers.
Object & Classes,Evaluate,Justify the use of Object & Classes.
Object & Classes,Evaluate,Defend the importance of Object & Classes.
Class Methods,Evaluate,Critique the implementation strategy for Class Methods.
Aggregation,Create,Construct a Java application that uses Aggregation.
Methods,Apply,Demonstrate how to implement Methods.
Encapsulation,Analyze,Analyze the structure of Encapsulation.
OOPs Concepts,Remember,List the key concepts related to OOPs Concepts.
Static Binding,Apply,Use appropriate syntax to write Static Binding.
Constructors,Apply,Use appropriate syntax to write Constructors.
Aggregation,Evaluate,Critique the implementation strategy for Aggregation.
Class Attributes,Apply,Demonstrate how to implement Class Attributes.
Inheritance,Understand,Summarize the role of Inheritance.
Object & Classes,Analyze,Compare different approaches in Object & Classes.
Instance Initializer Block,Apply,Modify an example using Instance Initializer Block.
Variables Scope,Understand,Interpret the functionality of Variables Scope.
Overriding,Apply,Demonstrate how to implement Overriding.
Instance Initializer Block,Analyze,Distinguish between features of Instance Initializer Block.
Abstraction,Evaluate,Justify the use of Abstraction.
Variables Scope,Evaluate,Evaluate the effectiveness of Variables Scope.
Static Binding,Evaluate,Defend the importance of Static Binding.
Polymorphism,Remember,Identify the purpose of Polymorphism.
Overriding,Remember,Identify the purpose of Overriding.
Polymorphism,Understand,Describe the use cases for Polymorphism.
Inheritance,Create,Design a program using Inheritance.
Methods,Understand,Explain the working of Methods.
Aggregation,Analyze,Analyze the structure of Aggregation.
Dynamic Binding,Create,Design a program using Dynamic Binding.
Static Binding,Apply,Execute operations using Static Binding.
Abstraction,Remember,Recall how to use Abstraction.
Instance Initializer Block,Understand,Explain the working of Instance Initializer Block.
Instance Initializer Block,Analyze,Analyze the structure of Instance Initializer Block.
Method Overloading,Analyze,Analyze the structure of Method Overloading.
Instance Initializer Block,Understand,Describe the use cases for Instance Initializer Block.
Encapsulation,Evaluate,Critique the implementation strategy for Encapsulation.
Method Overloading,Remember,Name important features of Method Overloading.
Access Modifiers,Understand,Explain the working of Access Modifiers.
Object & Classes,Understand,Summarize the role of Object & Classes.
Object & Classes,Remember,Recall how to use Object & Classes.
Object & Classes,Create,Compose a use case involving Object & Classes.
Method Overloading,Apply,Execute operations using Method Overloading.
Dynamic Binding,Apply,Demonstrate how to implement Dynamic Binding.
Object & Classes,Remember,Name important features of Object & Classes.
Abstraction,Evaluate,Defend the importance of Abstraction.
Constructors,Evaluate,Defend the importance of Constructors.
Methods,Create,Construct a Java application that uses Methods.
Abstraction,Analyze,Examine the components of Abstraction.
Instance Initializer Block,Apply,Execute operations using Instance Initializer Block.
Polymorphism,Analyze,Distinguish between features of Polymorphism.
Inheritance,Evaluate,Evaluate the effectiveness of Inheritance.
Static Binding,Analyze,Distinguish between features of Static Binding.
Dynamic Binding,Understand,Interpret the functionality of Dynamic Binding.
Interfaces,Apply,Demonstrate how to implement Interfaces.
Collections,Analyze,Analyze the structure of Collections.
SortedMap Interface,Understand,Summarize the role of SortedMap Interface.
Map Interface,Remember,Recall how to use Map Interface.
SortedMap Interface,Evaluate,Critique the implementation strategy for SortedMap Interface.
Interfaces,Evaluate,Defend the importance of Interfaces.
Comparators,Analyze,Analyze the structure of Comparators.
Set Interface,Understand,Explain the working of Set Interface.
Set Interface,Analyze,Distinguish between features of Set Interface.
Comparable Interface in Java,Remember,Identify the purpose of Comparable Interface in Java.
Map Interface,Create,Construct a Java application that uses Map Interface.
Set Interface,Create,Develop a solution incorporating Set Interface.
Collections,Apply,Execute operations using Collections.
Interfaces,Understand,Describe the use cases for Interfaces.
Collection Interface,Apply,Demonstrate how to implement Collection Interface.
SortedSet Interface,Create,Compose a use case involving SortedSet Interface.
Map Interface,Evaluate,Defend the importance of Map Interface.
Interfaces,Analyze,Distinguish between features of Interfaces.
Map Interface,Understand,Summarize the role of Map Interface.
SortedSet Interface,Understand,Summarize the role of SortedSet Interface.
SortedMap Interface,Evaluate,Evaluate the effectiveness of SortedMap Interface.
Comparable Interface in Java,Analyze,Analyze the structure of Comparable Interface in Java.
Interfaces,Understand,Interpret the functionality of Interfaces.
List Interface,Understand,Explain the working of List Interface.
Interfaces,Apply,Modify an example using Interfaces.
Collections,Analyze,Compare different approaches in Collections.
Comparators,Create,Compose a use case involving Comparators.
Map Interface,Evaluate,Evaluate the effectiveness of Map Interface.
SortedSet Interface,Remember,Identify the purpose of SortedSet Interface.
Map Interface,Create,Compose a use case involving Map Interface.
Collection Interface,Create,Construct a Java application that uses Collection Interface.
Interfaces,Remember,Recall how to use Interfaces.
SortedMap Interface,Evaluate,Justify the use of SortedMap Interface.
Collection Interface,Remember,List the key concepts related to Collection Interface.
List Interface,Create,Design a program using List Interface.
Set Interface,Understand,Describe the use cases for Set Interface.
Set Interface,Remember,Identify the purpose of Set Interface.
Comparators,Apply,Use appropriate syntax to write Comparators.
SortedSet Interface,Evaluate,Defend the importance of SortedSet Interface.
Set Interface,Create,Compose a use case involving Set Interface.
SortedSet Interface,Analyze,Analyze the structure of SortedSet Interface.
Collection Interface,Remember,Recall how to use Collection Interface.
Iterators,Apply,Use appropriate syntax to write Iterators.
Comparators,Analyze,Distinguish between features of Comparators.
Map Interface,Analyze,Compare different approaches in Map Interface.
Collection Interface,Evaluate,Defend the importance of Collection Interface.
Comparators,Evaluate,Critique the implementation strategy for Comparators.
Comparable Interface in Java,Understand,Describe the use cases for Comparable Interface in Java.
Interfaces,Apply,Execute operations using Interfaces.
SortedMap Interface,Remember,List the key concepts related to SortedMap Interface.
Set Interface,Create,Design a program using Set Interface.
Collection Interface,Understand,Summarize the role of Collection Interface.
Interfaces,Evaluate,Justify the use of Interfaces.
Collections,Create,Construct a Java application that uses Collections.
List Interface,Analyze,Examine the components of List Interface.
SortedSet Interface,Create,Develop a solution incorporating SortedSet Interface.
Map Interface,Create,Design a program using Map Interface.
List Interface,Analyze,Analyze the structure of List Interface.
Map Interface,Remember,List the key concepts related to Map Interface.
Queue Interface,Analyze,Compare different approaches in Queue Interface.
Comparators,Remember,Recall how to use Comparators.
Iterators,Evaluate,Defend the importance of Iterators.
SortedMap Interface,Evaluate,Defend the importance of SortedMap Interface.
Iterators,Remember,List the key concepts related to Iterators.
SortedSet Interface,Apply,Demonstrate how to implement SortedSet Interface.
Interfaces,Evaluate,Critique the implementation strategy for Interfaces.
SortedSet Interface,Remember,List the key concepts related to SortedSet Interface.
Comparators,Apply,Demonstrate how to implement Comparators.
SortedMap Interface,Create,Compose a use case involving SortedMap Interface.
SortedMap Interface,Create,Design a program using SortedMap Interface.
List Interface,Apply,Use appropriate syntax to write List Interface.
Create a File,Understand,Explain the working of Create a File.
Write to File,Understand,Explain the working of Write to File.
Write to File,Understand,Interpret the functionality of Write to File.
Delete Files,Apply,Execute operations using Delete Files.
Write to File,Evaluate,Justify the use of Write to File.
Delete Files,Evaluate,Justify the use of Delete Files.
I/O Streams,Create,Construct a Java application that uses I/O Streams.
Directories,Apply,Modify an example using Directories.
Read Files,Analyze,Distinguish between features of Read Files.
Create a File,Apply,Execute operations using Create a File.
Read Files,Apply,Demonstrate how to implement Read Files.
Write to File,Remember,List the key concepts related to Write to File.
Directories,Apply,Demonstrate how to implement Directories.
Read Files,Create,Compose a use case involving Read Files.
Read Files,Understand,Describe the use cases for Read Files.
Read Files,Evaluate,Justify the use of Read Files.
Files,Evaluate,Justify the use of Files.
Create a File,Remember,List the key concepts related to Create a File.
I/O Streams,Create,Design a program using I/O Streams.
Read Files,Analyze,Compare different approaches in Read Files.
Create a File,Create,Develop a solution incorporating Create a File.
Write to File,Apply,Execute operations using Write to File.
Read Files,Evaluate,Defend the importance of Read Files.
Read Files,Apply,Modify an example using Read Files.
Create a File,Analyze,Compare different approaches in Create a File.
Write to File,Create,Develop a solution incorporating Write to File.
Files,Create,Develop a solution incorporating Files.
I/O Streams,Remember,Recall how to use I/O Streams.
Read Files,Create,Design a program using Read Files.
Delete Files,Analyze,Distinguish between features of Delete Files.
I/O Streams,Understand,Describe the use cases for I/O Streams.
Files,Evaluate,Defend the importance of Files.
Files,Remember,Name important features of Files.
Delete Files,Remember,Identify the purpose of Delete Files.
Delete Files,Understand,Interpret the functionality of Delete Files.
I/O Streams,Evaluate,Defend the importance of I/O Streams.
Directories,Create,Develop a solution incorporating Directories.
Directories,Evaluate,Justify the use of Directories.
Delete Files,Create,Design a program using Delete Files.
I/O Streams,Understand,Interpret the functionality of I/O Streams.
Files,Remember,Identify the purpose of Files.
Delete Files,Understand,Summarize the role of Delete Files.
Delete Files,Evaluate,Critique the implementation strategy for Delete Files.
Create a File,Remember,Recall how to use Create a File.
Directories,Remember,Name important features of Directories.
Delete Files,Create,Construct a Java application that uses Delete Files.
Files,Create,Compose a use case involving Files.
Create a File,Evaluate,Evaluate the effectiveness of Create a File.
Read Files,Create,Construct a Java application that uses Read Files.
Create a File,Understand,Summarize the role of Create a File.
Create a File,Evaluate,Defend the importance of Create a File.
Directories,Analyze,Examine the components of Directories.
Files,Analyze,Examine the components of Files.
Write to File,Remember,Recall how to use Write to File.
I/O Streams,Analyze,Analyze the structure of I/O Streams.
Create a File,Evaluate,Justify the use of Create a File.
Read Files,Analyze,Examine the components of Read Files.
Delete Files,Analyze,Compare different approaches in Delete Files.
Create a File,Create,Construct a Java application that uses Create a File.
Directories,Remember,Recall how to use Directories.
Delete Files,Apply,Demonstrate how to implement Delete Files.
Write to File,Remember,Identify the purpose of Write to File.
Directories,Create,Construct a Java application that uses Directories.
I/O Streams,Analyze,Distinguish between features of I/O Streams.
Read Files,Understand,Explain the working of Read Files.
Files,Understand,Interpret the functionality of Files.
Read Files,Evaluate,Critique the implementation strategy for Read Files.
Read Files,Remember,Name important features of Read Files.
Delete Files,Create,Compose a use case involving Delete Files.
I/O Streams,Understand,Summarize the role of I/O Streams.
Files,Apply,Modify an example using Files.
Directories,Apply,Use appropriate syntax to write Directories.
Directories,Remember,List the key concepts related to Directories.
Create a File,Apply,Demonstrate how to implement Create a File.
Directories,Analyze,Distinguish between features of Directories.
Directories,Apply,Execute operations using Directories.
Create a File,Create,Compose a use case involving Create a File.
I/O Streams,Analyze,Examine the components of I/O Streams.
Write to File,Apply,Demonstrate how to implement Write to File.
Write to File,Understand,Describe the use cases for Write to File.
Files,Create,Construct a Java application that uses Files.
I/O Streams,Evaluate,Evaluate the effectiveness of I/O Streams.
Directories,Analyze,Analyze the structure of Directories.
Directories,Create,Compose a use case involving Directories.
Delete Files,Apply,Modify an example using Delete Files.
I/O Streams,Apply,Demonstrate how to implement I/O Streams.
Delete Files,Remember,Name important features of Delete Files.
Write to File,Analyze,Analyze the structure of Write to File.
Files,Evaluate,Critique the implementation strategy for Files.
Files,Apply,Execute operations using Files.
Files,Evaluate,Evaluate the effectiveness of Files.
Create a File,Apply,Modify an example using Create a File.
Delete Files,Analyze,Analyze the structure of Delete Files.
I/O Streams,Apply,Use appropriate syntax to write I/O Streams.
Write to File,Apply,Use appropriate syntax to write Write to File.
Write to File,Understand,Summarize the role of Write to File.
Files,Analyze,Compare different approaches in Files.
I/O Streams,Create,Compose a use case involving I/O Streams.
Read Files,Understand,Summarize the role of Read Files.
Create a File,Understand,Interpret the functionality of Create a File.
MVC using Servlets,Remember,Identify the purpose of MVC using Servlets.
Servlet Lifecycle,Understand,Interpret the functionality of Servlet Lifecycle.
Servlet Lifecycle,Evaluate,Defend the importance of Servlet Lifecycle.
Filters and Listeners,Evaluate,Evaluate the effectiveness of Filters and Listeners.
Filters and Listeners,Understand,Summarize the role of Filters and Listeners.
"Servlet API (HttpServletRequest, HttpServletResponse)",Create,"Compose a use case involving Servlet API (HttpServletRequest, HttpServletResponse)."
"Session Management (Cookies, HttpSession)",Understand,"Interpret the functionality of Session Management (Cookies, HttpSession)."
"Session Management (Cookies, HttpSession)",Create,"Construct a Java application that uses Session Management (Cookies, HttpSession)."
Servlet Lifecycle,Remember,Name important features of Servlet Lifecycle.
"Request Dispatcher, Context, Config",Analyze,"Examine the components of Request Dispatcher, Context, Config."
"Servlet API (HttpServletRequest, HttpServletResponse)",Analyze,"Analyze the structure of Servlet API (HttpServletRequest, HttpServletResponse)."
MVC using Servlets,Evaluate,Defend the importance of MVC using Servlets.
"Servlet API (HttpServletRequest, HttpServletResponse)",Remember,"Recall how to use Servlet API (HttpServletRequest, HttpServletResponse)."
"Request Dispatcher, Context, Config",Analyze,"Compare different approaches in Request Dispatcher, Context, Config."
"Session Management (Cookies, HttpSession)",Create,"Design a program using Session Management (Cookies, HttpSession)."
"Request Dispatcher, Context, Config",Evaluate,"Critique the implementation strategy for Request Dispatcher, Context, Config."
Servlet Lifecycle,Analyze,Distinguish between features of Servlet Lifecycle.
"Request Dispatcher, Context, Config",Evaluate,"Defend the importance of Request Dispatcher, Context, Config."
Filters and Listeners,Evaluate,Defend the importance of Filters and Listeners.
Filters and Listeners,Understand,Interpret the functionality of Filters and Listeners.
"Session Management (Cookies, HttpSession)",Evaluate,"Defend the importance of Session Management (Cookies, HttpSession)."
Servlet Lifecycle,Create,Develop a solution incorporating Servlet Lifecycle.
"Request Dispatcher, Context, Config",Understand,"Summarize the role of Request Dispatcher, Context, Config."
"Servlet API (HttpServletRequest, HttpServletResponse)",Create,"Construct a Java application that uses Servlet API (HttpServletRequest, HttpServletResponse)."
"Request Dispatcher, Context, Config",Apply,"Demonstrate how to implement Request Dispatcher, Context, Config."
Filters and Listeners,Evaluate,Justify the use of Filters and Listeners.
"Session Management (Cookies, HttpSession)",Create,"Develop a solution incorporating Session Management (Cookies, HttpSession)."
Servlet Lifecycle,Remember,List the key concepts related to Servlet Lifecycle.
"Request Dispatcher, Context, Config",Apply,"Modify an example using Request Dispatcher, Context, Config."
"Session Management (Cookies, HttpSession)",Understand,"Explain the working of Session Management (Cookies, HttpSession)."
Servlet Lifecycle,Create,Compose a use case involving Servlet Lifecycle.
Filters and Listeners,Apply,Modify an example using Filters and Listeners.
Filters and Listeners,Remember,Recall how to use Filters and Listeners.
MVC using Servlets,Apply,Use appropriate syntax to write MVC using Servlets.
"Request Dispatcher, Context, Config",Apply,"Use appropriate syntax to write Request Dispatcher, Context, Config."
"Session Management (Cookies, HttpSession)",Analyze,"Examine the components of Session Management (Cookies, HttpSession)."
"Servlet API (HttpServletRequest, HttpServletResponse)",Apply,"Use appropriate syntax to write Servlet API (HttpServletRequest, HttpServletResponse)."
"Session Management (Cookies, HttpSession)",Analyze,"Analyze the structure of Session Management (Cookies, HttpSession)."
Servlet Lifecycle,Remember,Recall how to use Servlet Lifecycle.
MVC using Servlets,Analyze,Analyze the structure of MVC using Servlets.
"Servlet API (HttpServletRequest, HttpServletResponse)",Remember,"Identify the purpose of Servlet API (HttpServletRequest, HttpServletResponse)."
"Servlet API (HttpServletRequest, HttpServletResponse)",Create,"Develop a solution incorporating Servlet API (HttpServletRequest, HttpServletResponse)."
Filters and Listeners,Analyze,Distinguish between features of Filters and Listeners.
"Request Dispatcher, Context, Config",Remember,"Identify the purpose of Request Dispatcher, Context, Config."
Filters and Listeners,Create,Compose a use case involving Filters and Listeners.
Filters and Listeners,Apply,Use appropriate syntax to write Filters and Listeners.
"Request Dispatcher, Context, Config",Understand,"Describe the use cases for Request Dispatcher, Context, Config."
Filters and Listeners,Remember,Name important features of Filters and Listeners.
"Request Dispatcher, Context, Config",Remember,"List the key concepts related to Request Dispatcher, Context, Config."
"Servlet API (HttpServletRequest, HttpServletResponse)",Understand,"Describe the use cases for Servlet API (HttpServletRequest, HttpServletResponse)."
"Session Management (Cookies, HttpSession)",Apply,"Execute operations using Session Management (Cookies, HttpSession)."
Servlet Lifecycle,Evaluate,Critique the implementation strategy for Servlet Lifecycle.
MVC using Servlets,Analyze,Compare different approaches in MVC using Servlets.
"Session Management (Cookies, HttpSession)",Remember,"List the key concepts related to Session Management (Cookies, HttpSession)."
Servlet Lifecycle,Apply,Use appropriate syntax to write Servlet Lifecycle.
"Session Management (Cookies, HttpSession)",Evaluate,"Evaluate the effectiveness of Session Management (Cookies, HttpSession)."
"Request Dispatcher, Context, Config",Understand,"Explain the working of Request Dispatcher, Context, Config."
Filters and Listeners,Create,Develop a solution incorporating Filters and Listeners.
"Request Dispatcher, Context, Config",Remember,"Name important features of Request Dispatcher, Context, Config."
"Session Management (Cookies, HttpSession)",Evaluate,"Justify the use of Session Management (Cookies, HttpSession)."
"Servlet API (HttpServletRequest, HttpServletResponse)",Create,"Design a program using Servlet API (HttpServletRequest, HttpServletResponse)."
MVC using Servlets,Analyze,Distinguish between features of MVC using Servlets.
Servlet Lifecycle,Evaluate,Justify the use of Servlet Lifecycle.
"Servlet API (HttpServletRequest, HttpServletResponse)",Apply,"Execute operations using Servlet API (HttpServletRequest, HttpServletResponse)."
"Servlet API (HttpServletRequest, HttpServletResponse)",Apply,"Demonstrate how to implement Servlet API (HttpServletRequest, HttpServletResponse)."
Servlet Lifecycle,Understand,Summarize the role of Servlet Lifecycle.
MVC using Servlets,Create,Construct a Java application that uses MVC using Servlets.
"Request Dispatcher, Context, Config",Create,"Construct a Java application that uses Request Dispatcher, Context, Config."
"Servlet API (HttpServletRequest, HttpServletResponse)",Understand,"Summarize the role of Servlet API (HttpServletRequest, HttpServletResponse)."
Filters and Listeners,Understand,Explain the working of Filters and Listeners.
"Servlet API (HttpServletRequest, HttpServletResponse)",Evaluate,"Evaluate the effectiveness of Servlet API (HttpServletRequest, HttpServletResponse)."
Servlet Lifecycle,Remember,Identify the purpose of Servlet Lifecycle.
Filters and Listeners,Create,Construct a Java application that uses Filters and Listeners.
"Session Management (Cookies, HttpSession)",Remember,"Name important features of Session Management (Cookies, HttpSession)."
"Servlet API (HttpServletRequest, HttpServletResponse)",Evaluate,"Justify the use of Servlet API (HttpServletRequest, HttpServletResponse)."
"Servlet API (HttpServletRequest, HttpServletResponse)",Evaluate,"Critique the implementation strategy for Servlet API (HttpServletRequest, HttpServletResponse)."
MVC using Servlets,Evaluate,Critique the implementation strategy for MVC using Servlets.
MVC using Servlets,Create,Develop a solution incorporating MVC using Servlets.
MVC using Servlets,Evaluate,Evaluate the effectiveness of MVC using Servlets.
"Session Management (Cookies, HttpSession)",Understand,"Describe the use cases for Session Management (Cookies, HttpSession)."
MVC using Servlets,Understand,Summarize the role of MVC using Servlets.
MVC using Servlets,Analyze,Examine the components of MVC using Servlets.
Servlet Lifecycle,Apply,Execute operations using Servlet Lifecycle.
Servlet Lifecycle,Create,Design a program using Servlet Lifecycle.
Filters and Listeners,Apply,Demonstrate how to implement Filters and Listeners.
"Request Dispatcher, Context, Config",Evaluate,"Justify the use of Request Dispatcher, Context, Config."
Filters and Listeners,Understand,Describe the use cases for Filters and Listeners.
"Servlet API (HttpServletRequest, HttpServletResponse)",Evaluate,"Defend the importance of Servlet API (HttpServletRequest, HttpServletResponse)."
Servlet Lifecycle,Create,Construct a Java application that uses Servlet Lifecycle.
Servlet Lifecycle,Analyze,Examine the components of Servlet Lifecycle.
"Request Dispatcher, Context, Config",Analyze,"Distinguish between features of Request Dispatcher, Context, Config."
"Session Management (Cookies, HttpSession)",Apply,"Modify an example using Session Management (Cookies, HttpSession)."
"Servlet API (HttpServletRequest, HttpServletResponse)",Remember,"Name important features of Servlet API (HttpServletRequest, HttpServletResponse)."
"Session Management (Cookies, HttpSession)",Analyze,"Distinguish between features of Session Management (Cookies, HttpSession)."
Servlet Lifecycle,Analyze,Compare different approaches in Servlet Lifecycle.
MVC using Servlets,Understand,Interpret the functionality of MVC using Servlets.
"Servlet API (HttpServletRequest, HttpServletResponse)",Understand,"Explain the working of Servlet API (HttpServletRequest, HttpServletResponse)."
Servlet Lifecycle,Understand,Describe the use cases for Servlet Lifecycle.
MVC using Servlets,Understand,Describe the use cases for MVC using Servlets.
"Session Management (Cookies, HttpSession)",Understand,"Summarize the role of Session Management (Cookies, HttpSession)."
JSP Implicit Objects,Remember,Identify the purpose of JSP Implicit Objects.
JSP Architecture and Lifecycle,Apply,Demonstrate how to implement JSP Architecture and Lifecycle.
Expression Language (EL),Create,Develop a solution incorporating Expression Language (EL).
JSP Implicit Objects,Create,Construct a Java application that uses JSP Implicit Objects.
JSP Architecture and Lifecycle,Create,Construct a Java application that uses JSP Architecture and Lifecycle.
"JSP Directives, Scripting Elements",Understand,"Explain the working of JSP Directives, Scripting Elements."
"JSP Directives, Scripting Elements",Understand,"Describe the use cases for JSP Directives, Scripting Elements."
JSP Architecture and Lifecycle,Create,Develop a solution incorporating JSP Architecture and Lifecycle.
JSP Architecture and Lifecycle,Evaluate,Critique the implementation strategy for JSP Architecture and Lifecycle.
Expression Language (EL),Apply,Demonstrate how to implement Expression Language (EL).
Expression Language (EL),Create,Compose a use case involving Expression Language (EL).
JSP Architecture and Lifecycle,Evaluate,Justify the use of JSP Architecture and Lifecycle.
JSP Standard Tag Library (JSTL),Apply,Execute operations using JSP Standard Tag Library (JSTL).
Error Handling and Debugging,Evaluate,Justify the use of Error Handling and Debugging.
JSP Implicit Objects,Evaluate,Justify the use of JSP Implicit Objects.
"JSP Directives, Scripting Elements",Analyze,"Examine the components of JSP Directives, Scripting Elements."
Error Handling and Debugging,Remember,Identify the purpose of Error Handling and Debugging.
JSP Standard Tag Library (JSTL),Remember,Recall how to use JSP Standard Tag Library (JSTL).
JSP Architecture and Lifecycle,Understand,Summarize the role of JSP Architecture and Lifecycle.
JSP Standard Tag Library (JSTL),Understand,Interpret the functionality of JSP Standard Tag Library (JSTL).
JSP Implicit Objects,Understand,Interpret the functionality of JSP Implicit Objects.
Expression Language (EL),Remember,List the key concepts related to Expression Language (EL).
Expression Language (EL),Remember,Name important features of Expression Language (EL).
JSP Standard Tag Library (JSTL),Remember,Name important features of JSP Standard Tag Library (JSTL).
Error Handling and Debugging,Analyze,Examine the components of Error Handling and Debugging.
Expression Language (EL),Understand,Explain the working of Expression Language (EL).
"JSP Directives, Scripting Elements",Evaluate,"Defend the importance of JSP Directives, Scripting Elements."
JSP Standard Tag Library (JSTL),Evaluate,Critique the implementation strategy for JSP Standard Tag Library (JSTL).
JSP Implicit Objects,Understand,Explain the working of JSP Implicit Objects.
JSP Standard Tag Library (JSTL),Apply,Demonstrate how to implement JSP Standard Tag Library (JSTL).
JSP Standard Tag Library (JSTL),Create,Design a program using JSP Standard Tag Library (JSTL).
Error Handling and Debugging,Create,Develop a solution incorporating Error Handling and Debugging.
Error Handling and Debugging,Understand,Explain the working of Error Handling and Debugging.
"JSP Directives, Scripting Elements",Remember,"Recall how to use JSP Directives, Scripting Elements."
JSP Implicit Objects,Analyze,Distinguish between features of JSP Implicit Objects.
JSP Implicit Objects,Apply,Use appropriate syntax to write JSP Implicit Objects.
JSP Standard Tag Library (JSTL),Apply,Modify an example using JSP Standard Tag Library (JSTL).
JSP Architecture and Lifecycle,Analyze,Examine the components of JSP Architecture and Lifecycle.
JSP Implicit Objects,Evaluate,Evaluate the effectiveness of JSP Implicit Objects.
Error Handling and Debugging,Analyze,Compare different approaches in Error Handling and Debugging.
JSP Standard Tag Library (JSTL),Understand,Explain the working of JSP Standard Tag Library (JSTL).
JSP Implicit Objects,Understand,Describe the use cases for JSP Implicit Objects.
JSP Architecture and Lifecycle,Understand,Interpret the functionality of JSP Architecture and Lifecycle.
JSP Implicit Objects,Apply,Demonstrate how to implement JSP Implicit Objects.
Error Handling and Debugging,Evaluate,Defend the importance of Error Handling and Debugging.
"JSP Directives, Scripting Elements",Create,"Design a program using JSP Directives, Scripting Elements."
Expression Language (EL),Evaluate,Evaluate the effectiveness of Expression Language (EL).
Expression Language (EL),Apply,Execute operations using Expression Language (EL).
JSP Standard Tag Library (JSTL),Evaluate,Justify the use of JSP Standard Tag Library (JSTL).
"JSP Directives, Scripting Elements",Apply,"Demonstrate how to implement JSP Directives, Scripting Elements."
"JSP Directives, Scripting Elements",Apply,"Use appropriate syntax to write JSP Directives, Scripting Elements."
Error Handling and Debugging,Create,Compose a use case involving Error Handling and Debugging.
JSP Standard Tag Library (JSTL),Create,Compose a use case involving JSP Standard Tag Library (JSTL).
JSP Architecture and Lifecycle,Understand,Explain the working of JSP Architecture and Lifecycle.
JSP Architecture and Lifecycle,Understand,Describe the use cases for JSP Architecture and Lifecycle.
"JSP Directives, Scripting Elements",Remember,"Name important features of JSP Directives, Scripting Elements."
JSP Implicit Objects,Create,Develop a solution incorporating JSP Implicit Objects.
"JSP Directives, Scripting Elements",Analyze,"Compare different approaches in JSP Directives, Scripting Elements."
Error Handling and Debugging,Apply,Modify an example using Error Handling and Debugging.
"JSP Directives, Scripting Elements",Analyze,"Analyze the structure of JSP Directives, Scripting Elements."
Expression Language (EL),Create,Design a program using Expression Language (EL).
JSP Architecture and Lifecycle,Remember,Identify the purpose of JSP Architecture and Lifecycle.
"JSP Directives, Scripting Elements",Evaluate,"Critique the implementation strategy for JSP Directives, Scripting Elements."
JSP Architecture and Lifecycle,Apply,Execute operations using JSP Architecture and Lifecycle.
JSP Architecture and Lifecycle,Analyze,Distinguish between features of JSP Architecture and Lifecycle.
Expression Language (EL),Analyze,Analyze the structure of Expression Language (EL).
Error Handling and Debugging,Create,Design a program using Error Handling and Debugging.
"JSP Directives, Scripting Elements",Evaluate,"Justify the use of JSP Directives, Scripting Elements."
Expression Language (EL),Understand,Describe the use cases for Expression Language (EL).
Expression Language (EL),Analyze,Compare different approaches in Expression Language (EL).
JSP Standard Tag Library (JSTL),Understand,Describe the use cases for JSP Standard Tag Library (JSTL).
JSP Architecture and Lifecycle,Evaluate,Defend the importance of JSP Architecture and Lifecycle.
Expression Language (EL),Create,Construct a Java application that uses Expression Language (EL).
Error Handling and Debugging,Analyze,Analyze the structure of Error Handling and Debugging.
Expression Language (EL),Remember,Recall how to use Expression Language (EL).
Error Handling and Debugging,Apply,Use appropriate syntax to write Error Handling and Debugging.
JSP Standard Tag Library (JSTL),Evaluate,Evaluate the effectiveness of JSP Standard Tag Library (JSTL).
JSP Standard Tag Library (JSTL),Evaluate,Defend the importance of JSP Standard Tag Library (JSTL).
JSP Standard Tag Library (JSTL),Remember,Identify the purpose of JSP Standard Tag Library (JSTL).
Error Handling and Debugging,Remember,List the key concepts related to Error Handling and Debugging.
Error Handling and Debugging,Understand,Interpret the functionality of Error Handling and Debugging.
JSP Implicit Objects,Evaluate,Defend the importance of JSP Implicit Objects.
JSP Architecture and Lifecycle,Apply,Modify an example using JSP Architecture and Lifecycle.
JSP Architecture and Lifecycle,Remember,Name important features of JSP Architecture and Lifecycle.
Error Handling and Debugging,Evaluate,Critique the implementation strategy for Error Handling and Debugging.
Expression Language (EL),Analyze,Examine the components of Expression Language (EL).
JSP Standard Tag Library (JSTL),Apply,Use appropriate syntax to write JSP Standard Tag Library (JSTL).
Error Handling and Debugging,Apply,Demonstrate how to implement Error Handling and Debugging.
JSP Implicit Objects,Apply,Execute operations using JSP Implicit Objects.
"JSP Directives, Scripting Elements",Create,"Construct a Java application that uses JSP Directives, Scripting Elements."
"JSP Directives, Scripting Elements",Evaluate,"Evaluate the effectiveness of JSP Directives, Scripting Elements."
JSP Implicit Objects,Remember,List the key concepts related to JSP Implicit Objects.
JSP Architecture and Lifecycle,Analyze,Compare different approaches in JSP Architecture and Lifecycle.
JSP Implicit Objects,Remember,Name important features of JSP Implicit Objects.
JSP Implicit Objects,Analyze,Analyze the structure of JSP Implicit Objects.
JSP Architecture and Lifecycle,Remember,Recall how to use JSP Architecture and Lifecycle.
Expression Language (EL),Evaluate,Justify the use of Expression Language (EL).
JSP Architecture and Lifecycle,Remember,List the key concepts related to JSP Architecture and Lifecycle.
Expression Language (EL),Remember,Identify the purpose of Expression Language (EL).
JSP Implicit Objects,Create,Compose a use case involving JSP Implicit Objects.
MVC Pattern (Model 1 vs. Model 2),Analyze,Examine the components of MVC Pattern (Model 1 vs. Model 2).
Introduction to JavaBeans,Remember,Name important features of Introduction to JavaBeans.
"Integration of Servlets, JSP, and JavaBeans",Analyze,"Analyze the structure of Integration of Servlets, JSP, and JavaBeans."
"Properties, Getters/Setters",Apply,"Use appropriate syntax to write Properties, Getters/Setters."
MVC Pattern (Model 1 vs. Model 2),Create,Design a program using MVC Pattern (Model 1 vs. Model 2).
MVC Pattern (Model 1 vs. Model 2),Apply,Execute operations using MVC Pattern (Model 1 vs. Model 2).
Introduction to JavaBeans,Apply,Modify an example using Introduction to JavaBeans.
"Integration of Servlets, JSP, and JavaBeans",Apply,"Execute operations using Integration of Servlets, JSP, and JavaBeans."
"Integration of Servlets, JSP, and JavaBeans",Apply,"Demonstrate how to implement Integration of Servlets, JSP, and JavaBeans."
"Integration of Servlets, JSP, and JavaBeans",Analyze,"Distinguish between features of Integration of Servlets, JSP, and JavaBeans."
Use of Beans in JSP,Evaluate,Defend the importance of Use of Beans in JSP.
"Integration of Servlets, JSP, and JavaBeans",Remember,"Identify the purpose of Integration of Servlets, JSP, and JavaBeans."
Use of Beans in JSP,Analyze,Examine the components of Use of Beans in JSP.
"Properties, Getters/Setters",Remember,"Name important features of Properties, Getters/Setters."
"Integration of Servlets, JSP, and JavaBeans",Create,"Develop a solution incorporating Integration of Servlets, JSP, and JavaBeans."
"Properties, Getters/Setters",Analyze,"Distinguish between features of Properties, Getters/Setters."
Introduction to JavaBeans,Apply,Use appropriate syntax to write Introduction to JavaBeans.
MVC Pattern (Model 1 vs. Model 2),Create,Compose a use case involving MVC Pattern (Model 1 vs. Model 2).
Introduction to JavaBeans,Remember,Recall how to use Introduction to JavaBeans.
"Properties, Getters/Setters",Create,"Compose a use case involving Properties, Getters/Setters."
MVC Pattern (Model 1 vs. Model 2),Remember,Identify the purpose of MVC Pattern (Model 1 vs. Model 2).
Introduction to JavaBeans,Understand,Interpret the functionality of Introduction to JavaBeans.
Use of Beans in JSP,Understand,Explain the working of Use of Beans in JSP.
"Integration of Servlets, JSP, and JavaBeans",Evaluate,"Evaluate the effectiveness of Integration of Servlets, JSP, and JavaBeans."
"Properties, Getters/Setters",Evaluate,"Justify the use of Properties, Getters/Setters."
Use of Beans in JSP,Analyze,Compare different approaches in Use of Beans in JSP.
MVC Pattern (Model 1 vs. Model 2),Apply,Modify an example using MVC Pattern (Model 1 vs. Model 2).
MVC Pattern (Model 1 vs. Model 2),Evaluate,Justify the use of MVC Pattern (Model 1 vs. Model 2).
"Integration of Servlets, JSP, and JavaBeans",Understand,"Summarize the role of Integration of Servlets, JSP, and JavaBeans."
Introduction to JavaBeans,Remember,List the key concepts related to Introduction to JavaBeans.
Introduction to JavaBeans,Apply,Demonstrate how to implement Introduction to JavaBeans.
"Properties, Getters/Setters",Understand,"Interpret the functionality of Properties, Getters/Setters."
MVC Pattern (Model 1 vs. Model 2),Understand,Summarize the role of MVC Pattern (Model 1 vs. Model 2).
MVC Pattern (Model 1 vs. Model 2),Apply,Use appropriate syntax to write MVC Pattern (Model 1 vs. Model 2).
"Properties, Getters/Setters",Apply,"Execute operations using Properties, Getters/Setters."
"Properties, Getters/Setters",Evaluate,"Evaluate the effectiveness of Properties, Getters/Setters."
MVC Pattern (Model 1 vs. Model 2),Remember,List the key concepts related to MVC Pattern (Model 1 vs. Model 2).
"Integration of Servlets, JSP, and JavaBeans",Create,"Construct a Java application that uses Integration of Servlets, JSP, and JavaBeans."
"Properties, Getters/Setters",Create,"Develop a solution incorporating Properties, Getters/Setters."
Use of Beans in JSP,Remember,List the key concepts related to Use of Beans in JSP.
Use of Beans in JSP,Create,Develop a solution incorporating Use of Beans in JSP.
"Properties, Getters/Setters",Create,"Construct a Java application that uses Properties, Getters/Setters."
Use of Beans in JSP,Create,Compose a use case involving Use of Beans in JSP.
MVC Pattern (Model 1 vs. Model 2),Analyze,Compare different approaches in MVC Pattern (Model 1 vs. Model 2).
Use of Beans in JSP,Evaluate,Evaluate the effectiveness of Use of Beans in JSP.
"Integration of Servlets, JSP, and JavaBeans",Evaluate,"Defend the importance of Integration of Servlets, JSP, and JavaBeans."
"Integration of Servlets, JSP, and JavaBeans",Analyze,"Compare different approaches in Integration of Servlets, JSP, and JavaBeans."
Introduction to JavaBeans,Evaluate,Critique the implementation strategy for Introduction to JavaBeans.
Use of Beans in JSP,Remember,Recall how to use Use of Beans in JSP.
"Properties, Getters/Setters",Remember,"List the key concepts related to Properties, Getters/Setters."
"Properties, Getters/Setters",Understand,"Summarize the role of Properties, Getters/Setters."
"Integration of Servlets, JSP, and JavaBeans",Understand,"Interpret the functionality of Integration of Servlets, JSP, and JavaBeans."
"Integration of Servlets, JSP, and JavaBeans",Remember,"Name important features of Integration of Servlets, JSP, and JavaBeans."
Use of Beans in JSP,Remember,Name important features of Use of Beans in JSP.
Introduction to JavaBeans,Remember,Identify the purpose of Introduction to JavaBeans.
"Integration of Servlets, JSP, and JavaBeans",Remember,"Recall how to use Integration of Servlets, JSP, and JavaBeans."
MVC Pattern (Model 1 vs. Model 2),Evaluate,Defend the importance of MVC Pattern (Model 1 vs. Model 2).
"Properties, Getters/Setters",Analyze,"Analyze the structure of Properties, Getters/Setters."
Use of Beans in JSP,Create,Construct a Java application that uses Use of Beans in JSP.
"Integration of Servlets, JSP, and JavaBeans",Evaluate,"Critique the implementation strategy for Integration of Servlets, JSP, and JavaBeans."
"Properties, Getters/Setters",Remember,"Identify the purpose of Properties, Getters/Setters."
"Properties, Getters/Setters",Evaluate,"Defend the importance of Properties, Getters/Setters."
"Integration of Servlets, JSP, and JavaBeans",Apply,"Use appropriate syntax to write Integration of Servlets, JSP, and JavaBeans."
"Properties, Getters/Setters",Understand,"Describe the use cases for Properties, Getters/Setters."
Introduction to JavaBeans,Analyze,Compare different approaches in Introduction to JavaBeans.
Use of Beans in JSP,Apply,Use appropriate syntax to write Use of Beans in JSP.
MVC Pattern (Model 1 vs. Model 2),Apply,Demonstrate how to implement MVC Pattern (Model 1 vs. Model 2).
"Properties, Getters/Setters",Apply,"Modify an example using Properties, Getters/Setters."
MVC Pattern (Model 1 vs. Model 2),Remember,Recall how to use MVC Pattern (Model 1 vs. Model 2).
MVC Pattern (Model 1 vs. Model 2),Create,Construct a Java application that uses MVC Pattern (Model 1 vs. Model 2).
Use of Beans in JSP,Apply,Modify an example using Use of Beans in JSP.
"Properties, Getters/Setters",Remember,"Recall how to use Properties, Getters/Setters."
Introduction to JavaBeans,Create,Compose a use case involving Introduction to JavaBeans.
MVC Pattern (Model 1 vs. Model 2),Remember,Name important features of MVC Pattern (Model 1 vs. Model 2).
MVC Pattern (Model 1 vs. Model 2),Understand,Interpret the functionality of MVC Pattern (Model 1 vs. Model 2).
"Integration of Servlets, JSP, and JavaBeans",Understand,"Explain the working of Integration of Servlets, JSP, and JavaBeans."
Introduction to JavaBeans,Analyze,Examine the components of Introduction to JavaBeans.
Introduction to JavaBeans,Understand,Explain the working of Introduction to JavaBeans.
MVC Pattern (Model 1 vs. Model 2),Understand,Explain the working of MVC Pattern (Model 1 vs. Model 2).
MVC Pattern (Model 1 vs. Model 2),Create,Develop a solution incorporating MVC Pattern (Model 1 vs. Model 2).
Use of Beans in JSP,Create,Design a program using Use of Beans in JSP.
Introduction to JavaBeans,Understand,Describe the use cases for Introduction to JavaBeans.
Use of Beans in JSP,Understand,Describe the use cases for Use of Beans in JSP.
"Properties, Getters/Setters",Evaluate,"Critique the implementation strategy for Properties, Getters/Setters."
Introduction to JavaBeans,Create,Construct a Java application that uses Introduction to JavaBeans.
Introduction to JavaBeans,Analyze,Analyze the structure of Introduction to JavaBeans.
MVC Pattern (Model 1 vs. Model 2),Understand,Describe the use cases for MVC Pattern (Model 1 vs. Model 2).
Introduction to JavaBeans,Understand,Summarize the role of Introduction to JavaBeans.
"Properties, Getters/Setters",Create,"Design a program using Properties, Getters/Setters."
"Integration of Servlets, JSP, and JavaBeans",Evaluate,"Justify the use of Integration of Servlets, JSP, and JavaBeans."
Introduction to JavaBeans,Evaluate,Defend the importance of Introduction to JavaBeans.
Use of Beans in JSP,Evaluate,Justify the use of Use of Beans in JSP.
Use of Beans in JSP,Understand,Interpret the functionality of Use of Beans in JSP.
"Integration of Servlets, JSP, and JavaBeans",Apply,"Modify an example using Integration of Servlets, JSP, and JavaBeans."
MVC Pattern (Model 1 vs. Model 2),Analyze,Distinguish between features of MVC Pattern (Model 1 vs. Model 2).
"Integration of Servlets, JSP, and JavaBeans",Understand,"Describe the use cases for Integration of Servlets, JSP, and JavaBeans."
Introduction to JavaBeans,Analyze,Distinguish between features of Introduction to JavaBeans.
"Integration of Servlets, JSP, and JavaBeans",Remember,"List the key concepts related to Integration of Servlets, JSP, and JavaBeans."
"Integration of Servlets, JSP, and JavaBeans",Analyze,"Examine the components of Integration of Servlets, JSP, and JavaBeans."
Use of Beans in JSP,Analyze,Distinguish between features of Use of Beans in JSP.
"XML, WSDL, SOAP, UDDI",Apply,"Use appropriate syntax to write XML, WSDL, SOAP, UDDI."
EJB and Transactions,Apply,Use appropriate syntax to write EJB and Transactions.
SOA and Web Services Basics,Understand,Summarize the role of SOA and Web Services Basics.
EJB Lifecycle and Container Services,Understand,Explain the working of EJB Lifecycle and Container Services.
SOA and Web Services Basics,Evaluate,Critique the implementation strategy for SOA and Web Services Basics.
REST vs. SOAP,Remember,Name important features of REST vs. SOAP.
JAX-WS and JAX-RS APIs,Evaluate,Defend the importance of JAX-WS and JAX-RS APIs.
"Types of EJB: Session Beans, Entity Beans, Message-driven Beans",Create,"Design a program using Types of EJB: Session Beans, Entity Beans, Message-driven Beans."
"Types of EJB: Session Beans, Entity Beans, Message-driven Beans",Evaluate,"Defend the importance of Types of EJB: Session Beans, Entity Beans, Message-driven Beans."
"Types of EJB: Session Beans, Entity Beans, Message-driven Beans",Evaluate,"Critique the implementation strategy for Types of EJB: Session Beans, Entity Beans, Message-driven Beans."
Annotations and Dependency Injection,Evaluate,Evaluate the effectiveness of Annotations and Dependency Injection.
"XML, WSDL, SOAP, UDDI",Analyze,"Compare different approaches in XML, WSDL, SOAP, UDDI."
EJB and Transactions,Analyze,Compare different approaches in EJB and Transactions.
REST vs. SOAP,Evaluate,Defend the importance of REST vs. SOAP.
"Types of EJB: Session Beans, Entity Beans, Message-driven Beans",Evaluate,"Justify the use of Types of EJB: Session Beans, Entity Beans, Message-driven Beans."
"XML, WSDL, SOAP, UDDI",Apply,"Execute operations using XML, WSDL, SOAP, UDDI."
EJB and Transactions,Understand,Interpret the functionality of EJB and Transactions.
"XML, WSDL, SOAP, UDDI",Understand,"Explain the working of XML, WSDL, SOAP, UDDI."
"XML, WSDL, SOAP, UDDI",Evaluate,"Evaluate the effectiveness of XML, WSDL, SOAP, UDDI."
"XML, WSDL, SOAP, UDDI",Evaluate,"Justify the use of XML, WSDL, SOAP, UDDI."
EJB and Transactions,Create,Compose a use case involving EJB and Transactions.
Annotations and Dependency Injection,Evaluate,Critique the implementation strategy for Annotations and Dependency Injection.
EJB Lifecycle and Container Services,Understand,Describe the use cases for EJB Lifecycle and Container Services.
EJB Lifecycle and Container Services,Create,Develop a solution incorporating EJB Lifecycle and Container Services.
SOA and Web Services Basics,Remember,Identify the purpose of SOA and Web Services Basics.
REST vs. SOAP,Understand,Interpret the functionality of REST vs. SOAP.
REST vs. SOAP,Understand,Summarize the role of REST vs. SOAP.
Annotations and Dependency Injection,Analyze,Distinguish between features of Annotations and Dependency Injection.
REST vs. SOAP,Understand,Describe the use cases for REST vs. SOAP.
EJB and Transactions,Analyze,Examine the components of EJB and Transactions.
SOA and Web Services Basics,Evaluate,Justify the use of SOA and Web Services Basics.
JAX-WS and JAX-RS APIs,Apply,Use appropriate syntax to write JAX-WS and JAX-RS APIs.
Annotations and Dependency Injection,Remember,Identify the purpose of Annotations and Dependency Injection.
EJB Lifecycle and Container Services,Remember,List the key concepts related to EJB Lifecycle and Container Services.
"Types of EJB: Session Beans, Entity Beans, Message-driven Beans",Analyze,"Analyze the structure of Types of EJB: Session Beans, Entity Beans, Message-driven Beans."
EJB Lifecycle and Container Services,Apply,Execute operations using EJB Lifecycle and Container Services.
EJB and Transactions,Evaluate,Critique the implementation strategy for EJB and Transactions.
Annotations and Dependency Injection,Evaluate,Defend the importance of Annotations and Dependency Injection.
Annotations and Dependency Injection,Remember,Name important features of Annotations and Dependency Injection.
"Types of EJB: Session Beans, Entity Beans, Message-driven Beans",Analyze,"Distinguish between features of Types of EJB: Session Beans, Entity Beans, Message-driven Beans."
SOA and Web Services Basics,Apply,Execute operations using SOA and Web Services Basics.
EJB Lifecycle and Container Services,Analyze,Analyze the structure of EJB Lifecycle and Container Services.
JAX-WS and JAX-RS APIs,Create,Construct a Java application that uses JAX-WS and JAX-RS APIs.
"Types of EJB: Session Beans, Entity Beans, Message-driven Beans",Apply,"Execute operations using Types of EJB: Session Beans, Entity Beans, Message-driven Beans."
SOA and Web Services Basics,Apply,Use appropriate syntax to write SOA and Web Services Basics.
"XML, WSDL, SOAP, UDDI",Analyze,"Examine the components of XML, WSDL, SOAP, UDDI."
SOA and Web Services Basics,Create,Design a program using SOA and Web Services Basics.
Annotations and Dependency Injection,Remember,Recall how to use Annotations and Dependency Injection.
EJB Lifecycle and Container Services,Evaluate,Defend the importance of EJB Lifecycle and Container Services.
EJB and Transactions,Evaluate,Justify the use of EJB and Transactions.
EJB Lifecycle and Container Services,Evaluate,Justify the use of EJB Lifecycle and Container Services.
SOA and Web Services Basics,Analyze,Analyze the structure of SOA and Web Services Basics.
Annotations and Dependency Injection,Create,Develop a solution incorporating Annotations and Dependency Injection.
"Types of EJB: Session Beans, Entity Beans, Message-driven Beans",Remember,"Identify the purpose of Types of EJB: Session Beans, Entity Beans, Message-driven Beans."
REST vs. SOAP,Understand,Explain the working of REST vs. SOAP.
EJB Lifecycle and Container Services,Apply,Demonstrate how to implement EJB Lifecycle and Container Services.
EJB Lifecycle and Container Services,Analyze,Examine the components of EJB Lifecycle and Container Services.
Annotations and Dependency Injection,Apply,Modify an example using Annotations and Dependency Injection.
"Types of EJB: Session Beans, Entity Beans, Message-driven Beans",Remember,"List the key concepts related to Types of EJB: Session Beans, Entity Beans, Message-driven Beans."
JAX-WS and JAX-RS APIs,Create,Develop a solution incorporating JAX-WS and JAX-RS APIs.
REST vs. SOAP,Create,Design a program using REST vs. SOAP.
"XML, WSDL, SOAP, UDDI",Apply,"Demonstrate how to implement XML, WSDL, SOAP, UDDI."
"Types of EJB: Session Beans, Entity Beans, Message-driven Beans",Evaluate,"Evaluate the effectiveness of Types of EJB: Session Beans, Entity Beans, Message-driven Beans."
Annotations and Dependency Injection,Apply,Execute operations using Annotations and Dependency Injection.
"XML, WSDL, SOAP, UDDI",Understand,"Describe the use cases for XML, WSDL, SOAP, UDDI."
JAX-WS and JAX-RS APIs,Understand,Summarize the role of JAX-WS and JAX-RS APIs.
SOA and Web Services Basics,Create,Develop a solution incorporating SOA and Web Services Basics.
REST vs. SOAP,Apply,Demonstrate how to implement REST vs. SOAP.
JAX-WS and JAX-RS APIs,Understand,Explain the working of JAX-WS and JAX-RS APIs.
Annotations and Dependency Injection,Understand,Explain the working of Annotations and Dependency Injection.
EJB and Transactions,Remember,Identify the purpose of EJB and Transactions.
Annotations and Dependency Injection,Understand,Describe the use cases for Annotations and Dependency Injection.
EJB and Transactions,Understand,Describe the use cases for EJB and Transactions.
REST vs. SOAP,Evaluate,Critique the implementation strategy for REST vs. SOAP.
REST vs. SOAP,Apply,Execute operations using REST vs. SOAP.
"Types of EJB: Session Beans, Entity Beans, Message-driven Beans",Create,"Develop a solution incorporating Types of EJB: Session Beans, Entity Beans, Message-driven Beans."
"XML, WSDL, SOAP, UDDI",Remember,"Name important features of XML, WSDL, SOAP, UDDI."
"XML, WSDL, SOAP, UDDI",Remember,"Recall how to use XML, WSDL, SOAP, UDDI."
"XML, WSDL, SOAP, UDDI",Understand,"Summarize the role of XML, WSDL, SOAP, UDDI."
JAX-WS and JAX-RS APIs,Evaluate,Evaluate the effectiveness of JAX-WS and JAX-RS APIs.
JAX-WS and JAX-RS APIs,Analyze,Compare different approaches in JAX-WS and JAX-RS APIs.
REST vs. SOAP,Apply,Modify an example using REST vs. SOAP.
"Types of EJB: Session Beans, Entity Beans, Message-driven Beans",Remember,"Name important features of Types of EJB: Session Beans, Entity Beans, Message-driven Beans."
EJB Lifecycle and Container Services,Remember,Identify the purpose of EJB Lifecycle and Container Services.
EJB Lifecycle and Container Services,Remember,Name important features of EJB Lifecycle and Container Services.
Annotations and Dependency Injection,Analyze,Analyze the structure of Annotations and Dependency Injection.
Annotations and Dependency Injection,Apply,Demonstrate how to implement Annotations and Dependency Injection.
EJB and Transactions,Create,Design a program using EJB and Transactions.
REST vs. SOAP,Remember,List the key concepts related to REST vs. SOAP.
"XML, WSDL, SOAP, UDDI",Understand,"Interpret the functionality of XML, WSDL, SOAP, UDDI."
JAX-WS and JAX-RS APIs,Remember,Identify the purpose of JAX-WS and JAX-RS APIs.
EJB and Transactions,Apply,Execute operations using EJB and Transactions.
SOA and Web Services Basics,Understand,Explain the working of SOA and Web Services Basics.
EJB Lifecycle and Container Services,Understand,Summarize the role of EJB Lifecycle and Container Services.
EJB and Transactions,Remember,List the key concepts related to EJB and Transactions.
SOA and Web Services Basics,Remember,List the key concepts related to SOA and Web Services Basics.
Annotations and Dependency Injection,Remember,List the key concepts related to Annotations and Dependency Injection.
SOA and Web Services Basics,Remember,Recall how to use SOA and Web Services Basics.
Annotations and Dependency Injection,Create,Construct a Java application that uses Annotations and Dependency Injection.
"XML, WSDL, SOAP, UDDI",Create,"Construct a Java application that uses XML, WSDL, SOAP, UDDI."
Web.xml Security Constraints,Remember,Identify the purpose of Web.xml Security Constraints.
"Application Deployment on Apache Tomcat, GlassFish",Apply,"Demonstrate how to implement Application Deployment on Apache Tomcat, GlassFish."
Introduction to Spring and Hibernate (Basics),Evaluate,Evaluate the effectiveness of Introduction to Spring and Hibernate (Basics).
Web.xml Security Constraints,Evaluate,Critique the implementation strategy for Web.xml Security Constraints.
Maven/Gradle for Project Management,Evaluate,Justify the use of Maven/Gradle for Project Management.
"Application Deployment on Apache Tomcat, GlassFish",Analyze,"Compare different approaches in Application Deployment on Apache Tomcat, GlassFish."
Server Configuration,Analyze,Compare different approaches in Server Configuration.
Maven/Gradle for Project Management,Understand,Explain the working of Maven/Gradle for Project Management.
Deploying WAR files,Create,Develop a solution incorporating Deploying WAR files.
Web.xml Security Constraints,Create,Compose a use case involving Web.xml Security Constraints.
Introduction to Spring and Hibernate (Basics),Analyze,Distinguish between features of Introduction to Spring and Hibernate (Basics).
JPA Overview,Evaluate,Critique the implementation strategy for JPA Overview.
Web.xml Security Constraints,Remember,Name important features of Web.xml Security Constraints.
Introduction to Spring and Hibernate (Basics),Remember,Recall how to use Introduction to Spring and Hibernate (Basics).
Introduction to Spring and Hibernate (Basics),Evaluate,Justify the use of Introduction to Spring and Hibernate (Basics).
Server Configuration,Remember,Recall how to use Server Configuration.
JPA Overview,Remember,Name important features of JPA Overview.
"SSL, HTTPS",Analyze,"Distinguish between features of SSL, HTTPS."
Web.xml Security Constraints,Understand,Explain the working of Web.xml Security Constraints.
"Application Deployment on Apache Tomcat, GlassFish",Apply,"Modify an example using Application Deployment on Apache Tomcat, GlassFish."
JPA Overview,Apply,Demonstrate how to implement JPA Overview.
"Application Deployment on Apache Tomcat, GlassFish",Analyze,"Examine the components of Application Deployment on Apache Tomcat, GlassFish."
JPA Overview,Create,Design a program using JPA Overview.
Web.xml Security Constraints,Analyze,Compare different approaches in Web.xml Security Constraints.
Authentication and Authorization,Understand,Explain the working of Authentication and Authorization.
"SSL, HTTPS",Apply,"Demonstrate how to implement SSL, HTTPS."
Introduction to Spring and Hibernate (Basics),Create,Construct a Java application that uses Introduction to Spring and Hibernate (Basics).
Introduction to Spring and Hibernate (Basics),Apply,Modify an example using Introduction to Spring and Hibernate (Basics).
Web.xml Security Constraints,Apply,Execute operations using Web.xml Security Constraints.
Server Configuration,Evaluate,Justify the use of Server Configuration.
Web.xml Security Constraints,Remember,Recall how to use Web.xml Security Constraints.
Maven/Gradle for Project Management,Evaluate,Critique the implementation strategy for Maven/Gradle for Project Management.
Deploying WAR files,Understand,Explain the working of Deploying WAR files.
"Application Deployment on Apache Tomcat, GlassFish",Understand,"Describe the use cases for Application Deployment on Apache Tomcat, GlassFish."
JPA Overview,Remember,Identify the purpose of JPA Overview.
"SSL, HTTPS",Apply,"Execute operations using SSL, HTTPS."
Introduction to Spring and Hibernate (Basics),Evaluate,Critique the implementation strategy for Introduction to Spring and Hibernate (Basics).
Server Configuration,Remember,List the key concepts related to Server Configuration.
Introduction to Spring and Hibernate (Basics),Understand,Interpret the functionality of Introduction to Spring and Hibernate (Basics).
Deploying WAR files,Remember,Name important features of Deploying WAR files.
Deploying WAR files,Apply,Demonstrate how to implement Deploying WAR files.
"Application Deployment on Apache Tomcat, GlassFish",Create,"Construct a Java application that uses Application Deployment on Apache Tomcat, GlassFish."
"Application Deployment on Apache Tomcat, GlassFish",Understand,"Explain the working of Application Deployment on Apache Tomcat, GlassFish."
Introduction to Spring and Hibernate (Basics),Create,Design a program using Introduction to Spring and Hibernate (Basics).
"Application Deployment on Apache Tomcat, GlassFish",Create,"Develop a solution incorporating Application Deployment on Apache Tomcat, GlassFish."
Introduction to Spring and Hibernate (Basics),Apply,Demonstrate how to implement Introduction to Spring and Hibernate (Basics).
Server Configuration,Create,Design a program using Server Configuration.
Maven/Gradle for Project Management,Remember,Name important features of Maven/Gradle for Project Management.
"SSL, HTTPS",Remember,"Name important features of SSL, HTTPS."
Server Configuration,Create,Construct a Java application that uses Server Configuration.
Maven/Gradle for Project Management,Create,Design a program using Maven/Gradle for Project Management.
Maven/Gradle for Project Management,Remember,List the key concepts related to Maven/Gradle for Project Management.
Introduction to Spring and Hibernate (Basics),Remember,Identify the purpose of Introduction to Spring and Hibernate (Basics).
Web.xml Security Constraints,Remember,List the key concepts related to Web.xml Security Constraints.
JPA Overview,Create,Construct a Java application that uses JPA Overview.
Authentication and Authorization,Understand,Describe the use cases for Authentication and Authorization.
Server Configuration,Apply,Use appropriate syntax to write Server Configuration.
Introduction to Spring and Hibernate (Basics),Remember,List the key concepts related to Introduction to Spring and Hibernate (Basics).
JPA Overview,Remember,Recall how to use JPA Overview.
Authentication and Authorization,Apply,Modify an example using Authentication and Authorization.
"SSL, HTTPS",Create,"Compose a use case involving SSL, HTTPS."
"SSL, HTTPS",Apply,"Modify an example using SSL, HTTPS."
Authentication and Authorization,Analyze,Compare different approaches in Authentication and Authorization.
Deploying WAR files,Apply,Execute operations using Deploying WAR files.
"Application Deployment on Apache Tomcat, GlassFish",Evaluate,"Defend the importance of Application Deployment on Apache Tomcat, GlassFish."
Server Configuration,Remember,Identify the purpose of Server Configuration.
"SSL, HTTPS",Evaluate,"Critique the implementation strategy for SSL, HTTPS."
JPA Overview,Understand,Interpret the functionality of JPA Overview.
"SSL, HTTPS",Analyze,"Examine the components of SSL, HTTPS."
JPA Overview,Create,Develop a solution incorporating JPA Overview.
Deploying WAR files,Remember,Identify the purpose of Deploying WAR files.
Deploying WAR files,Analyze,Compare different approaches in Deploying WAR files.
JPA Overview,Apply,Use appropriate syntax to write JPA Overview.
"Application Deployment on Apache Tomcat, GlassFish",Remember,"Name important features of Application Deployment on Apache Tomcat, GlassFish."
Maven/Gradle for Project Management,Understand,Describe the use cases for Maven/Gradle for Project Management.
Deploying WAR files,Remember,List the key concepts related to Deploying WAR files.
Server Configuration,Evaluate,Evaluate the effectiveness of Server Configuration.
Maven/Gradle for Project Management,Create,Construct a Java application that uses Maven/Gradle for Project Management.
Authentication and Authorization,Analyze,Distinguish between features of Authentication and Authorization.
Deploying WAR files,Apply,Modify an example using Deploying WAR files.
"SSL, HTTPS",Evaluate,"Justify the use of SSL, HTTPS."
Authentication and Authorization,Apply,Demonstrate how to implement Authentication and Authorization.
"SSL, HTTPS",Remember,"Recall how to use SSL, HTTPS."
"SSL, HTTPS",Analyze,"Analyze the structure of SSL, HTTPS."
Deploying WAR files,Apply,Use appropriate syntax to write Deploying WAR files.
Server Configuration,Apply,Modify an example using Server Configuration.
Authentication and Authorization,Evaluate,Critique the implementation strategy for Authentication and Authorization.
JPA Overview,Analyze,Distinguish between features of JPA Overview.
Maven/Gradle for Project Management,Evaluate,Defend the importance of Maven/Gradle for Project Management.
Authentication and Authorization,Apply,Use appropriate syntax to write Authentication and Authorization.
JPA Overview,Understand,Explain the working of JPA Overview.
Deploying WAR files,Create,Construct a Java application that uses Deploying WAR files.
JPA Overview,Apply,Execute operations using JPA Overview.
Introduction to Spring and Hibernate (Basics),Create,Develop a solution incorporating Introduction to Spring and Hibernate (Basics).
Maven/Gradle for Project Management,Apply,Use appropriate syntax to write Maven/Gradle for Project Management.
Deploying WAR files,Create,Compose a use case involving Deploying WAR files.
Server Configuration,Evaluate,Critique the implementation strategy for Server Configuration.
JPA Overview,Understand,Summarize the role of JPA Overview.
Deploying WAR files,Evaluate,Defend the importance of Deploying WAR files.
"Application Deployment on Apache Tomcat, GlassFish",Apply,"Execute operations using Application Deployment on Apache Tomcat, GlassFish."
General Java,Apply,Write a program to display “hello world”.
Operators,Apply,Write a program that shows the use of bit wise operators.
Operators,Apply,Write a program that shows the use of arithmetic operators.
Operators,Apply,Write a program that shows the use of increment and decrement operators.
General Java,Apply,"Write a program to display the area of circle using (i)command line argument, (ii)Scanner class (iii)  BufferedReader class"
General Java,Apply,Write a program to display the addition result of any two integers.
General Java,Apply,Write a program for the swapping of two numbers.
General Java,Apply,Write a program to print all the prime numbers between 1 to 100.
General Java,Apply,Write a program to print all the palindrome number between 100 to 500.
General Java,Remember,"Write a program to display the student name, roll no and age of a student using class and object  concept."
General Java,Apply,Write separate programs that shows the implementation of   (i)static variable and static member function   (ii)static block concept
Constructors,Apply,"Write a program that shows the use of default, parameterized and copy constructor."
General Java,Understand,Write separate programs for method overloading and method overriding mechanism.
Inheritance,Apply,Write a program for single inheritance mechanism.
General Java,Apply,Write a program where abstract class concept is used.
Constructors,Apply,Write a program to pass the arguments from child class constructor to parent class constructor using  super ( ).
Interfaces,Remember,"Write a program to display name, department and age of employee using interface mechanism"
Packages,Remember,Write a program for the implementation of user defined package.
String Handling,Apply,Write a program for the manipulation of string using different functions of String class.
Multithreading,Apply,Write a program for the execution of multiple threads with their priority.
Multithreading,Apply,Write a program for the execution of multiple threads.
Applet,Understand,Write a complete program for the execution of applet mechanism.
Applet,Apply,Write a program for drawing several GUI components on applet.
General Java,Apply,Write a program for the implementation of several methods of Graphics class.
Exception Handling,Apply,Write a program for handling multiple exceptions.
General Java,Understand,Write a complete program for Java Database Connectivity.
General Java,Apply,Write a program to enter two numbers(say a and b) and an option. If the option is:  1:display the result (a+b)  2: display the result (a-b)  3: display the result (a*b)       4: display the result (a/b)  5: display the result (a%b)
General Java,Remember,Write a program to display emp. no=101 and emp. name=”Martin” using class and object concept.
Constructors,Apply,"Write a program to display the area of triangle, rectangle and circle using constructors."
General Java,Apply,Write a program to print all the armstrong numbers between 200 to 400.
General Java,Apply,Write a program to check whether a number is prime or not.
General Java,Apply,Write a program to check whether a number is armstrong or not.
General Java,Apply,Write a program to check whether a number is pallindrome or not.
General Java,Create,"Develop a menu based program for the addition, subtraction, multiplication and division of two  complex numbers."
Constructors,Apply,"Write a program for the addition, subtraction, multiplication and division of two   numbers using  constructor."
General Java,Apply,Write a program for addition of two 3x3 matrix.
General Java,Apply,Write a program for multiplication of two 3x3 matrix.
General Java,Apply,Write a program to display the transpose of a 3x3 matrix.
General Java,Apply,Write a program to display the sum of digits of a number.
General Java,Apply,Write a program to display the reverse of a number.
Arrays,Apply,Write a program to enter n numbers to an array and display the greatest and smallest number.
Inheritance,Apply,Write a program that shows the use of multilevel inheritance mechanism.
Inheritance,Apply,Write a program that shows the use of multiple inheritance mechanism using interface.
General Java,Apply,"Write a program to display car no., model, color and price of a car using class and object concept.(use  Scanner class)"
Packages,Remember,"Write a program to display the area of circle, triangle and rectangle using user defined package"
Interfaces,Remember,"Write a program to display the  name, pages, price and author of a book using interface mechanism."
General Java,Apply,Write a program to display the average of five integers.
General Java,Apply,Write a program to display simple interest.
General Java,Apply,Write a program to display the factorial of a number.
General Java,Apply,Write a program to display the fibonacci series upto n terms.
General Java,Apply,Write a program to enter two numbers and display the GCD and LCM.
General Java,Apply,Write a program to convert decimal number to binary number.
General Java,Understand,Write separate programs for different pyramid structures.
GUI - Swing,Apply,Write a program for the implementation of swing components.
General Java,Understand,Write a java socket programming in which client sends a text and server receives it.
OOP Concepts,Remember,What are the OOP Principles?
Encapsulation,Remember,What is Encapsulation?
Polymorphism,Remember,What is Polymorphism?
Inheritance,Remember,What is Inheritance?
General Java,Remember,What are the features of Java Language?
General Java,Remember,What is the need for Java Language?
General Java,Remember,What is platform independency?
General Java,Remember,What is Architecture Neutral?
General Java,Understand,How Java supports platform independency?
General Java,Understand,Why Java is important to Internet?
General Java,Remember,What are the types of programs Java can handle?
Applet,Remember,What is an applet program?
Applet,Understand,Compare Application and Applet.
General Java,Remember,What are the advantages of Java Language?
General Java,Understand,Give the contents of Java Environment (JDK).
General Java,Understand,Give any 4 differences between C and Java.
General Java,Understand,Give any 4 differences between C++ and Java.
General Java,Remember,What are the different types of comment symbols in Java?
General Java,Remember,What are the data types supported in Java?
General Java,Remember,What is the difference between a char in C/C++ and char in Java?
General Java,Remember,How is a constant defined in Java?
Final Keyword,Remember,What is the use of final keyword?
Operators,Remember,What are the different types of operators used in Java?
General Java,Remember,What is short-Circuit operator?
General Java,Remember,What is labeled break?
General Java,Remember,What is the use of for each control structure?
General Java,Remember,What is the need for static variables?
General Java,Remember,What is the need for static methods?
Final Keyword,Understand,Compare static constants and final constants.
General Java,Understand,Why is main method assigned as public?
General Java,Understand,Why is main method assigned as static?
General Java,Remember,What are the types of variables Java handles?
General Java,Remember,What are the relationships between classes?
General Java,Remember,What is the general form of a class?
General Java,Remember,What is the use of new keyword?
General Java,Remember,"If ObjA1 is an object of class A created using new keyword, What does the statement A  ObjA2=ObjA1;    mean?"
Constructors,Remember,What is a constructor?
Constructors,Remember,What is the difference between a constructor and a method?
General Java,Remember,What is the use of this keyword?
General Java,Remember,What are destructors?
General Java,Understand,How is object destruction done in Java?
General Java,Remember,What is Garbage collection?
Final Keyword,Remember,What is the use of finalize method?
Final Keyword,Understand,Compare Garbage collection and finalize method?
Final Keyword,Understand,How is it guaranteed that finalize methods are called?
General Java,Remember,What is method overloading?
String Handling,Remember,What is a String in Java?
String Handling,Remember,What is the difference between a String in Java and String in C/C++?
String Handling,Remember,Name a few String methods.
String Handling,Remember,What is the difference between Concat method and + operator to join strings?
String Handling,Remember,What is String Buffer?
String Handling,Understand,How does String class differ from the String Buffer class?
String Handling,Remember,Name some methods available under String Buffer class.
String Handling,Understand,Output of some expressions using String methods.
Arrays,Understand,How will you initialize arrays?
Arrays,Remember,What is arraycopy method? Explain with syntax.
Arrays,Remember,What are the methods under Util.Arrays?
Arrays,Apply,Use the array sort method to sort the given array.
Arrays,Understand,Give the syntax for array fill operation.
Arrays,Remember,What is vector? How is it different from an array?
General Java,Remember,What is the constraint for using vectors?
General Java,Remember,What is wrapper class?
General Java,Remember,What are the different access specifiers available in Java?
General Java,Remember,What is the default access specifier in Java?
Packages,Remember,What is a package in Java?
Packages,Remember,Name some Java API Packages.
General Java,Remember,Name some JavaDoc Comments.
General Java,Remember,What is CommandLine Arguments.
OOP Concepts,Understand,Explain OOP Principles.
General Java,Understand,Explain the features of Java Language.
General Java,Understand,Compare and Contrast Java with C.
General Java,Understand,Compare and Contrast Java with C++.
Constructors,Understand,Explain Constructors with examples.
String Handling,Understand,Explain the methods available under String and String Buffer Class.
General Java,Understand,Explain the Date Class methods with examples.
General Java,Understand,Discuss in detail the access specifiers available in Java.
General Java,Understand,Explain the different visibility controls and also compare with each of them.
Arrays,Understand,Explain the different methods in java.Util.Arrays class with example.
Packages,Understand,Explain Packages in detail.
Arrays,Understand,Discuss the methods under Array Class.
Packages,Understand,Discuss some of the classes available under Lang package.
Final Keyword,Understand,Illustrate with examples: static and final.
General Java,Understand,Explain method overriding with example program.
General Java,Remember,"What is javaDoc? Explain the comments for classes, methods, fields and link."
General Java,Understand,Application Programs in Java.
Inheritance,Remember,Define Inheritance
Inheritance,Remember,What are the types of inheritance?
Inheritance,Understand,How is multiple inheritance achieved in java?
General Java,Remember,What is the use of super keyword?
General Java,Remember,What are object wrappers? Give example.
Inheritance,Remember,What is Inheritance Hierarchy?
General Java,Analyze,Differentiate overloading and overriding.
Polymorphism,Remember,Define polymorphism.
General Java,Analyze,Differentiate static binding and dynamic binding.
Final Keyword,Understand,When will a class be declared as final?
Final Keyword,Understand,When will a method be declared final?
General Java,Remember,What is an abstract class?
General Java,Remember,What is the need for abstract classes?
General Java,Understand,Explain about protected visibility control.
General Java,Remember,"What are the methods under ""object"" class / java.lang.Object."
String Handling,Understand,Explain toString method of object class.
Reflection,Remember,What is reflection?
Reflection,Remember,What are the uses of reflection in Java.
General Java,Create,How will you create an instance of Class.
Reflection,Remember,What are the methods under reflection used to analyze the capabilities of classes?
Arrays,Create,How to create arrays dynamically using reflection package.
Interfaces,Remember,Define an interface.
Interfaces,Remember,What is the need for an interface?
Interfaces,Remember,What are the properties of an interface?
Interfaces,Analyze,Differentiate Abstract classes and interface.
General Java,Remember,What is object cloning?
General Java,Analyze,Differentiate cloning and copying.
General Java,Analyze,Differentiate shallow copy and deep copy in cloning.
Inheritance,Understand,Does Inheritance removes any fields/or methods of super class?
Final Keyword,Apply,Mention the use of final keyword.
General Java,Remember,What is nested class? Mention its types.
General Java,Remember,What is inner class?
General Java,Remember,What is the need for inner classes?
General Java,Remember,What are the rules for inner class?
General Java,Remember,What is local inner class and anonymous inner class? Give their advantages.
General Java,Understand,Write the advantages and disadvantages of static nested class.
General Java,Remember,Define proxies.
General Java,Understand,Write the application of proxies.
Proxy Classes,Remember,What are the properties of proxy classes?
Inheritance,Understand,Explain the concept of inheritance and its types.
General Java,Understand,Explain the concept of overriding with examples.
General Java,Remember,What is dynamic binding? Explain with example.
Reflection,Understand,Explain the uses of reflection with examples.
Interfaces,Remember,Define an interface. Explain with example.
General Java,Understand,Explain the methods under “object” class and “class” class.
General Java,Remember,What is object cloning? Explain deep copy and shallow copy with examples.
General Java,Understand,Explain static nested class and inner class with examples.
General Java,Understand,With an example explain proxies.
General Java,Apply,"Develop a message abstract class which contains playMessage abstract method. Write a different  sub-classes like TextMessage, VoiceMessage and FaxMessage classes for to implementing the  playMessage method."
General Java,Apply,Develop a abstract Reservation class which has Reserve abstract method. Implement the sub- classes like ReserveTrain and ReserveBus classes and implement the same.
Interfaces,Apply,Develop an Interest interface which contains simpleInterest and compInterest methods and static  final field of Rate 25%. Write a class to implement those methods.
Interfaces,Create,"Develop a Library interface which has drawbook(), returnbook() (with fine), checkstatus() and  reservebook() methods. All the methods tagged with public."
Interfaces,Remember,Develop an Employee class which implements the Comparable and Cloneable interfaces.  Implement the sorting of persons (based on name in alphabetical). Also implement the shallow copy  (for name and age) and deep copy (for DateOfJoining).
General Java,Understand,Explain the different methods supported in Object class with example.
General Java,Understand,Explain the methods supported in Class class.
Constructors,Understand,"Explain the Methods supported in reflect package. Also write a program to implement the  reflection of a particular class details like constructors, methods and fields with its modifiers."
Arrays,Create,Develop a static Inner class called Pair which has MinMax method for finding min and max  values from the array.
Proxy Classes,Remember,What is proxy class? Develop a code for constructing a proxy objects to trace a binary search  method with explanations.
Inheritance,Understand,Draw the inheritance hierarchy for the frame and component classes in AWT and Swing.
GUI - Swing,Remember,What are the advantages of using swing over awt?
General Java,Understand,How do achieve special fonts for your text? Give example.
General Java,Understand,Give the syntax of drawImage() and copyArea() methods.
General Java,Remember,What is Adapter class?
Event Handling,Understand,Draw the AWT event Hierarchy.
GUI - Swing,Remember,What are the swing components?
Interfaces,Remember,What are the methods under Action Interface.
Interfaces,Remember,What are the methods under WindowListener Interface.
GUI - Swing,Remember,What is the difference between Swing and AWT?
General Java,Understand,Explain the classes under 2D shapes.
Event Handling,Understand,Explain event handling with examples.
Event Handling,Understand,Explain action event with an example.
GUI - Swing,Remember,What are the swing components. Explain.
Event Handling,Understand,Describe the AWT event hierarchy.
General Java,Remember,What is generic programming?
Exception Handling,Remember,What are Checked and UnChecked Exception?
Exception Handling,Remember,What are checked exceptions?
Exception Handling,Remember,What are runtime exceptions?
Exception Handling,Remember,What is the difference between error and an exception?
Exception Handling,Remember,What classes of exceptions may be caught by a catch clause?.
Exception Handling,Remember,"If I want an object of my class to be thrown as an exception object, what should I do?"
Exception Handling,Create,How to create custom exceptions?
Exception Handling,Remember,What are the different ways to handle exceptions?
Final Keyword,Remember,What is the purpose of the finally clause of a try-catch-finally statement?
Exception Handling,Remember,What is the basic difference between the 2 approaches to exception handling.
General Java,Understand,Is it necessary that each try block must be followed by a catch block?
General Java,Understand,How does Java handle integer overflows and underflows?
General Java,Understand,Explain generic classes and methods.
Exception Handling,Understand,Explain exception hierarchy.
General Java,Remember,What are the advantages of Generic Programming?
Exception Handling,Understand,Explain the different ways to handle exceptions.
General Java,Understand,How Java handle overflows and underflows?
Multithreading,Understand,Describe synchronization in respect to multithreading.
Multithreading,Understand,Explain different way of using thread?
General Java,Remember,What is synchronization and why is it important?
Multithreading,Remember,"When a thread is created and started, what is its initial state?"
General Java,Remember,What are synchronized methods and synchronized statements?
Multithreading,Remember,What is daemon thread and which method is used to create the daemon thread?
Multithreading,Remember,What method must be implemented by all threads?
Multithreading,Remember,What kind of thread is the Garbage collector thread?
Multithreading,Remember,What is a daemon thread?
Multithreading,Remember,What is a thread?
Multithreading,Remember,What is the algorithm used in Thread scheduling?
General Java,Remember,What are the different level lockings using the synchronization keyword?
Multithreading,Remember,What are the ways in which you can instantiate a thread?
Multithreading,Remember,What are the states of a thread?
Multithreading,Remember,"What are the threads will start, when you start the java program?"
Multithreading,Remember,What are the different identifier states of a Thread?
Multithreading,Understand,Why do threads block on I/O?
Multithreading,Remember,Explain the different states of a thread.
Multithreading,Understand,Explain thread synchronization with examples.
Multithreading,Understand,Explain the algorithm used for thread scheduling.
Multithreading,Understand,Describe multi threading.
General Java,Understand,Explain Deadlocks.
General Java,Understand,Explain JVM.
General Java,Understand,Explain Bytecode.
General Java,Understand,Explain the three principles of Java.
General Java,Remember,What is class and instance of a class?
General Java,Remember,What are objects? How to create objects?
OOP Concepts,Understand,Explain the features of OOP.
Polymorphism,Understand,Explain how the concept of polymorphism is implemented in Java?
Encapsulation,Understand,Explain encapsulation in the object oriented programming.
Encapsulation,Remember,What is encapsulation? How does Java achieve encapsulation?
Polymorphism,Understand,How does Java incorporates the concept of polymorphism? Give one example.
Encapsulation,Remember,What do you understand by encapsulation in Java?
General Java,Understand,Explain the steps involved in implementation of a Java program.
General Java,Understand,Explain the use of JVM.
General Java,Remember,What is Java Development Kit (JDK)?
Polymorphism,Understand,Explain the term polymorphism with an example.
General Java,Understand,Explain the features of Java.
General Java,Remember,Is the following statement true or false? If it is false then supply suitable example:
General Java,Understand,“The data is lost when converted from higher data type to lower data type.”
General Java,Remember,"Can you make the keyword public to private in main() method? If yes, what will happen?"
General Java,Understand,Explain with an example data types boolean and byte in Java.
General Java,Understand,Explain with an example data type byte in Java.
General Java,Remember,What is type conversion in Java? Explain with an example.
Operators,Understand,Write the difference between the operators = and = = in Java.
General Java,Remember,What is type casting? Give an example to explain it.
General Java,Remember,What are literals? State the boolean literals.
Operators,Remember,List the different operators in Java.
General Java,Remember,What are literals in Java? Mention their different types.
General Java,Remember,What are different integer data types in Java?
Operators,Understand,Explain any two logical operators in Java with example.
General Java,Remember,What is meant by an assignment statement? For what purpose it is used?
Operators,Remember,State the bitwise operators in Java. Explain any one.
General Java,Remember,Write the difference between break and continue statements in Java.
General Java,Remember,Explain switch statement in Java.
General Java,Remember,Explain switch statement with example in Java.
General Java,Remember,Explain the goto statement in Java.
OOP Concepts,Understand,Explain while loop in Java.
OOP Concepts,Remember,Explain any one loop statement in Java with an example.
Arrays,Understand,Explain how arrays are created in Java? How array elements are accessed?
Arrays,Understand,How do you declare an array in Java? Give an example.
Arrays,Understand,How do you declare a two dimensional array in Java? Give an example.
Arrays,Remember,Define an array. How do you declare and create array objects?
General Java,Remember,Can you have two return statements in a method? Can you write any statement after return?  Explain.
Constructors,Create,Write difference between constructor and method.
General Java,Remember,Can you have a method without return statement? Explain.
General Java,Understand,Explain the use of the keyword static in Java.
General Java,Understand,Explain overloading in Java.
General Java,Remember,Explain the return statement in Java.
General Java,Remember,"State whether the following statement is true/false with justification “when a reference  variable is assigned to another reference variable, another copy of object is created.”"
General Java,Understand,Explain the keyword new in Java.
General Java,Understand,Explain the meaning of the keywords used in the declaration of main() method.
General Java,Remember,What is an instance variable? How does one access an instance variable of a class?
Constructors,Understand,Explain different types of constructors in Java.
Constructors,Remember,What are constructors? How are they different from methods?
General Java,Understand,Explain overloading methods with an example.
General Java,Understand,Write a short note on this keyword.
Final Keyword,Understand,Explain the finalize method.
General Java,Remember,What do you understand by an abstract class?
General Java,Remember,What is method overriding and how does it differ from methos overloading in Java?
Event Handling,Understand,When can a method in super class be prevented from being overridden by a method in  subclass?
General Java,Understand,Explain by an example.
General Java,Understand,Explain in brief the overriding methods in Java.
Final Keyword,Understand,Explain the use of the keyword final in Java programming.
Final Keyword,Understand,Explain the use of finalize method.
General Java,Remember,State the different access specifiers available in Java.
Event Handling,Remember,What is method overriding and how does one prevent a method from being overridden?
General Java,Remember,State any two differences between method overloading and method overriding.
Inheritance,Remember,What do you understand by inheritance in Java?
Constructors,Create,How does a subclass constructor call a super class constructor?
Final Keyword,Understand,Write a note on finalizer method.
General Java,Understand,Explain the keyword super in Java.
General Java,Remember,What is a class and a subclass? Give examples.
Inheritance,Remember,What is inheritance? Is multiple inheritance supported by Java?
General Java,Remember,What is data abstraction?
General Java,Understand,Explain the terms subclass and super class.
General Java,Remember,What are different access specifiers in Java?
Final Keyword,Remember,What do you mean by final variable and final method?
General Java,Understand,Explain an abstract class.
Packages,Understand,Explain the term package.
Interfaces,Remember,What is the major difference between an interface and a class?
Packages,Understand,Explain how to use a particular package in a Java program. Give example.
Interfaces,Remember,What is an interface? How is it implemented?
Packages,Remember,What do you mean by a package in Java?
General Java,Understand,Write a method to fill a rectangle with red color.
Applet,Remember,What is an applet? How do applets differ from an application programs?
Applet,Understand,Explain life cycle of an applet.
Applet,Understand,Write a method in Java applet to display a circle.
Applet,Understand,How do we pass parameters to an applet? Give one example.
Applet,Remember,What does your method do when start() (life cycle of an applet) is called?
Applet,Understand,"Explain destroy() method, a stage in the life cycle of an applet."
General Java,Understand,"Write a method to display a message “Computer Programming” at position (50, 20)  inside a square."
General Java,Understand,Explain drawRect () method in Graphics class with suitable example.
Applet,Apply,How getParameter () method is used in applet?
General Java,Understand,Explain Font class and Color class.
Applet,Understand,Explain the steps involved to execute and run an applet.
General Java,Remember,What is AWT? What are the various components in AWT?
Inheritance,Remember,Define OOP.  Object-Oriented Programming (OOP) is a methodology or paradigm to design a program  using classes and objects. It simplifies the software development and maintenance by  providing some concepts:  ○  Object  ○  Class  ○  Inheritance  ○  Polymorphism  ○  Abstraction  ○  Encapsulation
General Java,Remember,"Define object and class.  Any entity that has state and behavior is known as an object. For example: chair, pen,  table, keyboard, bike etc. It can be either physical or logical.  A class is the basic building block of an object-oriented language. It is a template that  describes the data and behavior associated with instances of that class. The data associ-  ated with a class or object is stored in variables and the behavior associated with a class  or object is implemented with methods."
General Java,Remember,"How can we create an instance of a class in java?  To create an instance of a class:    Declare an instance identifier (instance name) of a particular class.    Construct the instance (i.e., allocate storage for the instance and initialize the instance)  using the “new” operator."
Inheritance,Remember,"Define Inheritance.  When one object acquires all the properties and behaviours of parent object, it is known  as inheritance. It provides code reusability. It is used to achieve runtime polymorphism."
Inheritance,Remember,What are the types of inheritance in java?
Inheritance,Understand,Single Inheritance
Inheritance,Understand,Multilevel Inheritance
Inheritance,Understand,Hierarchical Inheritance
Inheritance,Understand,Hybrid Inheritance
Polymorphism,Remember,"Define Polymorphism.  Polymorphism means taking many forms, where „poly‟ means many and „morph‟ means  forms. It is the ability of a variable, function or object to take on multiple forms.      Sri Vidya College of Engineering & Technology    Question Bank    CS8392 Object Oriented Programming  Page 2"
General Java,Remember,"Define abstraction.  Hiding internal details and showing functionality is known as abstraction. For example:  phone call, we don‟t know the internal processing."
Encapsulation,Remember,"Define encapsulation.    Binding (or wrapping) code and data together into a single unit is known as  encapsulation. For example: capsule, it is wrapped with different medicines.    A java class is the example of encapsulation."
OOP Concepts,Remember,"List the advantage of OOPs over Procedure-oriented programming language  OOPs makes development and maintenance easier. But in Procedure-oriented program-  ming language, it is not easy to manage if code grows as project size grows.  OOPs  provides  data  hiding  whereas  in  Procedure-oriented   programming    language, global data can be accessed from anywhere.  OOPs  provides  ability  to  simulate   real-world   event   much   more   effectively.    We can provide the solution of real word problem if we are  using  the  Object-   Oriented Programming language."
Inheritance,Remember,"What is difference between object-oriented programming language and object-based  programming language?  Object oriented language    Object-oriented language supports all the features of OOPs.    Object-oriented language doesn‟t has in-built object.    Object-oriented languages are C++, C#, Java etc.  Object based language    Object-based language doesn‟t support all the features of OOPs like Polymorphism  and Inheritance    Object-based language has in-built object like javascript has window object.    Object-based languages are Javascript, VB etc."
Packages,Remember,What are the three major sections of java source file?  The source consists of three major sections:    The package    The import    Class definition
Packages,Remember,"List out the source file declaration rules.    There can be only one public class per source file.    A source file can have multiple non-public classes.    The public class name should be the name of the source file which should have  .java extension at the end.    For eg, if the class name is public class Employee{}, then the source file should be  as Employee.java.  Sri Vidya College of Engineering & Technology    Question Bank    CS8392 Object Oriented Programming  Page 3      If the class is defined inside a package, then the package statement should be the first  statement in the source file.    If import statements are present, then they must be written between the package  statement and the class declaration. If there are no package statements, then the import  statement should be the first line in the source file.    Import and package statements will imply to all the classes present in the source file.  It is not possible to declare different import and/or package statements to different  classes in the source file."
General Java,Remember,Define Jvm.  The JVM is an interpreter for the bytecode form of the program. It steps through one byte-  code instruction at a time. It is an abstract computing machine that enables a computer to  run a Java program.
General Java,Remember,"What is bytecode?  Bytecode is a highly optimized set of instructions designed to be executed by the java  run-time system, which is called as java virtual machine (JVM). JVM is an interpreter for  bytecode."
General Java,Apply,Write a note on integer data types in java.  Integers are used for storing integer values. There are four kinds of integer types in Java.  Each of these can hold a different range of values. The values can either be positive or  negative.    type  size  byte  short  int  long  8 bits  16 bits  32 bits  64 bits
General Java,Remember,"Write a note on float data types in Java.  Float is used to store numbers with decimal part. There are two floating point data types  in Java namely, the float and the double.    type  size  float    double  32 bits    64 bits"
Inheritance,Understand,give any three OOP concepts.    Encapsulation    Inheritance    Polymorphism
Packages,Remember,"Write a note on import statement?  Classes external to a program must be imported before they can be used. To import a  class, the import keyword should be used as given below:  import <classname>  Sri Vidya College of Engineering & Technology    Question Bank    CS8392 Object Oriented Programming  Page 4    The whole path of the class must be specified to import a class from the Java library, For  instance, to import the Date class from the util package, the following code is used:  import java.util.Date;  It is also possible to import all classes that belong to a package using the * symbol."
Multithreading,Remember,List out the features of java.    Simple    Secure    Portable    Object-oriented    Robust    Multithreaded    Architecture-neutral    Interpreted    High performance    Distributed    Dynamic
General Java,Remember,"What is the use of comment?  The contents of a comment are ignored by the compiler. Instead, a comment can be used  to describe or explain the operation of the program to anyone who is reading its source  code."
General Java,Remember,"What is a variable? How to declare variable in java?  The variable is the basic unit of storage in a java program. A variable is defined by the  combination of an identifier, a type, and an optional initialize. All variables must be de-  clared before they can be used. The basic form of a variable declaration is shown have  Type identifier [= value],[,identifier [=value]]  The type in one of java‟s atomic types. The identifier is the name of the variable. For example  int a,b,c;  int d=3,c=5;"
General Java,Remember,"What is a variable? What are the different types of variables?  Variable are locations in the memory that can hold values. Java has three kinds of variable  namely,    Instance variable    Local variable    Class variable"
General Java,Remember,"What are the difference between static variable and instance variable?  The data or variables, defined within a class are called instance variables.Instance vari-  ables declared as static are, essentially, global variables. When objects of its class are  declared, no copy of a static variable is made.  Sri Vidya College of Engineering & Technology    Question Bank    CS8392 Object Oriented Programming  Page 5"
General Java,Remember,"Write a note on conditional operator in java.  The conditional operator is otherwise known as the ternary operator and is considered to  be an alternative to the if else construct. It returns a value and the syntax is:  <test> ? <pass> : <fail>  Where,<test> is the condition to be tested. If the condition returns true then the state-  ment given in <pass> will be executed. Otherwise, the statement given in <fail> will be  executed."
Operators,Remember,List out the operator in java    Arithmetic Operators    Increment and Decrement Operators    Bitewise Operators    Relational Operators    Logical Operators    Assignment Operators
General Java,Remember,What are jump statements in java?  In java have three jump statements    return    continue    break
OOP Concepts,Remember,"differentiable between break and continue statements?  The break keyword halts the execution of the current loop and forces control out of the  loop. The term break refers to the act of breaking out of a b lock of code. Continue is similar  to break, except that instead of halting the execution of the loop, it starts the next iteration."
General Java,Remember,"What is a class? give an example?  A class defines the shape and behavior of an object and is a template for multiple objects  with similar features.  or  A class is a new data type. Once defined, this new type can be used to create ob-  jects of that type. Thus, a class is a template for an object, and an object is an instance of  a class."
Constructors,Remember,"What are constructors?  A constructor initializes an object immediately upon creation. It has the same name as the  class in which it resides and is syntactically similar to a method. Once defined, the con-  structor is automatically called immediately after the object is created, before the new op-  erator completes."
Constructors,Remember,What’s the difference between constructors and other methods?  Constructors must have the same name as the class and cannot return a value. They are  only called once while regular methods could be called many times.    Sri Vidya College of Engineering & Technology    Question Bank    CS8392 Object Oriented Programming  Page 6
Interfaces,Remember,"What is a package?  A Package is a container that groups related types (classes, interfaces, enumerations and  annotations). It is similar to folders in computer. It is generally used to control access and  to avoid naming collision. The syntax for Create package is  Syntax:  package pkg_name;"
General Java,Remember,What is static variable?  Variable declared with keyword static is a static variable. It is a class level variable com-  monly shared by all objects of the class.    Memory allocation for such variables only happens once when the class is loaded in  the memory.    scope of the static variable is class scope ( accessible only inside the class)    lifetime is global ( memory is assigned till the class is removed by JVM).    Automatically initialized to 0.  Example:  static int no;
General Java,Remember,"Write short notes on static method.  The method declared with static keyword is known as static method. main() is most com-  mon static method.    It belongs to the class and not to object of a class.    A static method can directly access only static variables of class and directly invoke  only static methods of the class.    It can be called through the name of class without Create any instance of that class.  For example, ClassName.methodName()  Example:  static void show(){  System,out.println(“Hello”);  }"
Packages,Remember,What do you mean by static import?  The static import allows the programmer to access any static members of imported class  directly. There is no need to qualify it by its name.  Syntax:  import static package_name;
General Java,Remember,"What is a static block?  A static block is a block of code enclosed in braces, preceded by the keyword static.    The statements within the static block are first executed automatically before main  when the class is loaded into JVM.    A class can have any number of static blocks.  Sri Vidya College of Engineering & Technology    Question Bank    CS8392 Object Oriented Programming  Page 7      PART-B"
Packages,Understand,Explain about packages. Give an example program which uses packages.  ( 
General Java,Understand,Explain with the help of a program how object oriented programming overcomes the  shortcomings of procedure oriented programming.
Arrays,Understand,"Given two one dimensional arrays A and B which are sorted in ascending order.  Write   a Java program to merge them into a single sorted array, see that is contains  every item from array A and B, in ascending order. "
Polymorphism,Understand,"With an example, describe in detail about how polymorphism plays a useful role in  Java. "
General Java,Understand,Describe the following:  a. Features of Java  b. Data types in Java (8)
Packages,Remember,Explain about Package in Java. List built in Java API packages. 
General Java,Understand,Discuss the various parameter passing methods in Java. Illustrate with examples. 
Arrays,Understand,Explain the arrays and its types in detail with example program.  
